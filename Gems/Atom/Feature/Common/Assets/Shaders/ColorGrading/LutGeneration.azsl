/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/RPI/Math.azsli>

#include <Atom/Features/SrgSemantics.azsli>

#include <Atom/Features/PostProcessing/FullscreenVertex.azsli>

#include <Atom/Features/PostProcessing/Aces.azsli>
#include <Atom/Features/PostProcessing/Shapers.azsli>
#include <Atom/Features/PostProcessing/HDRColorGradingCommon.azsl>

float3 convert2Dto3DLutCoords(float2 uv, float width, float height)
{
    float2 adjustedUv = float2(uv.x * width, uv.y * height);
    float3 coords = float3(adjustedUv.x%height, 0.5 + int(adjustedUv.x/height), adjustedUv.y);
    return coords/height;
}

enum class LutResolution
{
    Lut16x16x16,
    Lut32x32x32,
    Lut64x64x64
};

ShaderResourceGroup PassSrg : SRG_PerPass_WithFallback
{
    // framebuffer sampler
    Sampler PointSampler
    {
        MinFilter = Point;
        MagFilter = Point;
        MipFilter = Point;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

    // Identity LUTs
    Texture3D<float4> m_identityLut16x16x16;
    Texture3D<float4> m_identityLut32x32x32;
    Texture3D<float4> m_identityLut64x64x64;

    int m_lutResolution;
    int m_shaperType;
    float m_shaperBias;
    float m_shaperScale;

    float m_colorGradingExposure;
    float m_colorGradingContrast;
    float m_colorGradingHueShift;
    float m_colorGradingPreSaturation;
    float m_colorFilterIntensity;
    float m_colorFilterMultiply;
    float m_whiteBalanceKelvin;
    float m_whiteBalanceTint;
    float m_splitToneBalance;
    float m_splitToneWeight;
    float m_colorGradingPostSaturation;
    float m_smhShadowsStart;
    float m_smhShadowsEnd;
    float m_smhHighlightsStart;
    float m_smhHighlightsEnd;
    float m_smhWeight;

    float3 m_channelMixingRed;
    float3 m_channelMixingGreen;
    float3 m_channelMixingBlue;

    float4 m_colorFilterSwatch;
    float4 m_splitToneShadowsColor;
    float4 m_splitToneHighlightsColor;

    float4 m_smhShadowsColor;
    float4 m_smhMidtonesColor;
    float4 m_smhHighlightsColor;
}

float3 ColorGrade(float3 linearColor)
{
    float3 color = TransformColor(linearColor, ColorSpaceId::LinearSRGB, ColorSpaceId::ACEScg);
    color = ColorGradePostExposure(color, PassSrg::m_colorGradingExposure);
    color = ColorGradeKelvinColorTemp(color, PassSrg::m_whiteBalanceKelvin);
    color = ColorGradingContrast(color, AcesCcMidGrey, PassSrg::m_colorGradingContrast);
    color = ColorGradeColorFilter(color, PassSrg::m_colorFilterSwatch.rgb,
                                         PassSrg::m_colorFilterMultiply, PassSrg::m_colorFilterIntensity);
    color = max(color, 0.0);
    color = ColorGradeSaturation(color, PassSrg::m_colorGradingPreSaturation);
    color = ColorGradeSplitTone(color, PassSrg::m_splitToneBalance, PassSrg::m_splitToneWeight,
                                        PassSrg::m_splitToneShadowsColor, PassSrg::m_splitToneHighlightsColor);
    color = ColorGradeChannelMixer(color, PassSrg::m_channelMixingRed, PassSrg::m_channelMixingGreen, PassSrg::m_channelMixingBlue);
    color = max(color, 0.0);
    color = ColorGradeShadowsMidtonesHighlights(color, PassSrg::m_smhShadowsStart, PassSrg::m_smhShadowsEnd,
                                                    PassSrg::m_smhHighlightsStart, PassSrg::m_smhHighlightsEnd, PassSrg::m_smhWeight,
                                                    PassSrg::m_smhShadowsColor, PassSrg::m_smhMidtonesColor, PassSrg::m_smhHighlightsColor);
    color = ColorGradeHueShift(color, PassSrg::m_colorGradingHueShift);
    color = ColorGradeSaturation(color, PassSrg::m_colorGradingPostSaturation);
    color = TransformColor(color, ColorSpaceId::ACEScg, ColorSpaceId::LinearSRGB);
    return max(color.rgb, 0.0);
}

struct PSOutput
{
    float4 m_lutOutput : SV_Target0;
};

float3 GetSourceLutLinearColor(float3 baseColor, Texture3D<float4> sourceLut, ShaperType shaperType, float shaperBias, float shaperScale)
{
    // Convert from reference linearColor to the lutCoordinate for this Lut
    float3 lutCoord = LinearToShaper(baseColor, shaperType, shaperBias, shaperScale);

    // Adjust coordinate to the domain excluding the outer half texel in all directions
    uint3 outputDimensions;
    sourceLut.GetDimensions(outputDimensions.x, outputDimensions.y, outputDimensions.z);
    float3 coordBias = 1.0 / (2.0 * outputDimensions);
    float3 coordScale = (outputDimensions - 1.0) / outputDimensions;
    lutCoord = (lutCoord * coordScale) + coordBias;

    float3 lutColor = sourceLut.SampleLevel(PassSrg::LinearSampler, lutCoord, 0).rgb;
    // Convert to linear
    float3 linearColor = ShaperToLinear(lutColor, shaperType, shaperBias, shaperScale);
    return linearColor;
}

PSOutput MainPS(VSOutput IN)
{
    ShaperType shaperType = (ShaperType)PassSrg::m_shaperType;

    PSOutput OUT;

    float3 baseCoords = float3(0.0, 0.0, 0.0);
    float3 lutColor = float3(0.0, 0.0, 0.0);
    LutResolution lutRes = (LutResolution)PassSrg::m_lutResolution;
    switch(lutRes)
    {
        case LutResolution::Lut16x16x16:
        {
            // This seems correct.
            baseCoords = convert2Dto3DLutCoords(IN.m_texCoord, 256, 16);
            lutColor = PassSrg::m_identityLut16x16x16.Sample(PassSrg::PointSampler, baseCoords, 0.0).rgb;
            break;
        }
        case LutResolution::Lut32x32x32:
        {
            baseCoords = convert2Dto3DLutCoords(IN.m_texCoord, 1024, 32);
            lutColor = PassSrg::m_identityLut32x32x32.Sample(PassSrg::PointSampler, baseCoords, 0.0).rgb;
            break;
        }
        case LutResolution::Lut64x64x64:
        {
            // This doesn't look right.
            baseCoords = convert2Dto3DLutCoords(IN.m_texCoord, 4096, 64);
            float3 baseColor = ShaperToLinear(baseCoords, shaperType, PassSrg::m_shaperBias, PassSrg::m_shaperScale);
            //lutColor = PassSrg::m_identityLut64x64x64.Sample(PassSrg::PointSampler, baseCoords, 0.0).rgb;
            lutColor = GetSourceLutLinearColor(
                baseColor,
                PassSrg::m_identityLut64x64x64,
                shaperType,
                PassSrg::m_shaperBias,
                PassSrg::m_shaperScale
            );
            break;
        }
    }

    // color grade in linear sapce
    float3 gradedColor = ColorGrade(lutColor);

    float3 shapedColor = LinearToShaper(gradedColor, shaperType, PassSrg::m_shaperBias, PassSrg::m_shaperScale);
    float3 clampedColor = saturate(gradedColor);

    OUT.m_lutOutput = float4(clampedColor, 1.0);
    return OUT;
}
