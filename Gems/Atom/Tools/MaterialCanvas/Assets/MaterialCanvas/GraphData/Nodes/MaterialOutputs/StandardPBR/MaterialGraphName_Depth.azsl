/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <scenesrg.srgi>
#include <viewsrg.srgi>
#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>
#include <Atom/Features/Pipeline/Forward/ForwardPassOutput.azsli>
#include <Atom/Features/Pipeline/Forward/ForwardPassSrg.azsli>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>
#include <Atom/Features/SrgSemantics.azsli>

#include "MaterialGraphName_Common.azsli"

VsOutput MainVS(VsInput IN)
{
    return EvaluateVertexGeometry(IN);
}

struct PsDepthOutput
{
    precise float depth : SV_Depth;
};

PsDepthOutput MainPS(VsOutput IN, bool isFrontFace : SV_IsFrontFace)
{
    PsDepthOutput OUT;
    OUT.depth = IN.position.z;

#if DEPTH_WITH_PS
    float4x4 objectToWorld = ObjectSrg::GetWorldMatrix();
    float3x3 objectToWorldIT = ObjectSrg::GetWorldMatrixInverseTranspose();

    float3 vertexNormal, vertexTangent, vertexBitangent;
    ConstructTBN(IN.normal, IN.tangent, objectToWorld, objectToWorldIT, vertexNormal, vertexTangent, vertexBitangent);

#if 0
    if(ShouldHandleParallaxInDepthShaders())
    {
        float3 tangents[UvSetCount] = { vertexTangent, vertexTangent };
        float3 bitangents[UvSetCount] = { vertexBitangent, vertexBitangent };

        for (int i = 0; i != UvSetCount; ++i)
        {
            EvaluateTangentFrame(
                vertexNormal,
                IN.worldPosition, 
                isFrontFace,
                IN.uv[i],
                i,
                vertexTangent,
                vertexBitangent,
                tangents[i],
                bitangents[i]);
        }

        SetPixelDepth(IN.m_worldPosition, vertexNormal, tangents, bitangents, IN.uv[0], isFrontFace, OUT.depth);
    }
#endif

    #define O3DE_MC_POSITION IN.worldPosition
    #define O3DE_MC_UV(index) IN.uv[clamp(index, 0, UvSetCount-1];
    #define O3DE_MC_NORMAL vertexNormal
    #define O3DE_MC_TANGENT vertexTangent
    #define O3DE_MC_BITANGENT vertexBitangent
    #define O3DE_MC_WORLD_POSITION IN.worldPosition

    // O3DE_GENERATED_INSTRUCTIONS_BEGIN: inAlpha
    float inAlpha = 1.0;
    // O3DE_GENERATED_INSTRUCTIONS_END

    #undef O3DE_MC_POSITION
    #undef O3DE_MC_UV
    #undef O3DE_MC_NORMAL
    #undef O3DE_MC_TANGENT
    #undef O3DE_MC_BITANGENT
    #undef O3DE_MC_WORLD_POSITION

    CheckClipping(inAlpha, 0.99);
#endif

    return OUT;
}
