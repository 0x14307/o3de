/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
 
#include <Atom/Features/SrgSemantics.azsli>
 
#include <Atom/Features/PostProcessing/FullscreenPixelInfo.azsli>
#include <Atom/Features/PostProcessing/FullscreenVertex.azsli>
 
ShaderResourceGroup PassSrg : SRG_PerPass_WithFallback
{
    Texture2D<float4> m_framebuffer;
    Texture2D<float4> m_depth;
    Texture2D<float4> m_entityMask;
    
    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

    Sampler PointSampler
    {
        MinFilter = Point;
        MagFilter = Point;
        MipFilter = Point;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };
 
    float4 m_color;
    float m_desaturationAmount;
}

static float2 maskSize;

float2 normalizedUV(float2 uv)
{
    return uv/maskSize;
}
 
// Entity outliner effect
float selectedEntityOutliner(float2 unormalizedUv)
{
    float r = 0.;
    float lineThickness = 10.;
     
    // Selected entity mask value
    float S = PassSrg::m_entityMask.Sample(PassSrg::PointSampler, normalizedUV(unormalizedUv)).a;
     
    // Outliner kernal
    for(float u = -lineThickness; u <= lineThickness; u+=1.)
    {
        for(float v = -lineThickness; v <= lineThickness; v+=1.)
        {
            r += PassSrg::m_entityMask.Sample(PassSrg::PointSampler, normalizedUV(unormalizedUv + float2(u,v))).r;
        }
    }
     
    // Only apply the outliner effect to fragments not part of S
    // Could just do an early exit above when S > 0.0...
    return min(1.0, (r / lineThickness) * (1.0 - S));
}
 
PSOutput MainPS(VSOutput IN)
{
    PSOutput OUT;

    uint2 uMaskSize;
    PassSrg::m_entityMask.GetDimensions(uMaskSize.x, uMaskSize.y);

    maskSize.x = float(uMaskSize.x);
    maskSize.y = float(uMaskSize.y);

    float2 unnormalizedUV = float2(IN.m_texCoord.x * maskSize.x, IN.m_texCoord.y * maskSize.y);
 
    // Fetch the pixel color from the input texture
    float3 color = PassSrg::m_framebuffer.Sample(PassSrg::LinearSampler, IN.m_texCoord).rgb;
 
    // Get the mask value at this point
    float4 mask = PassSrg::m_entityMask.Sample(PassSrg::PointSampler, IN.m_texCoord);

    // Averge the colors to get a desaturated effect
    float sat = (color.r + color.g + color.b) / 3.0;

    // Calculate the visual effect for non-mask entities
    float3 unmasked = lerp(color, float3(sat, sat, sat), PassSrg::m_desaturationAmount);
    
    // Apply the visual effect to non-mask entities, leaving mask entities untouched
    OUT.m_color.rgb = lerp(unmasked.rgb, mask.rgb, mask.a);
    OUT.m_color.a = 1.0;

    float outline = selectedEntityOutliner(unnormalizedUV);
    float3 outlineColor = float3(.96, 0.65, 0.13);
    OUT.m_color.rgb = lerp(OUT.m_color.rgb, outlineColor, outline);

    return OUT;
}