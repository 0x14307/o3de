/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/Features/PostProcessing/FullscreenPixelInfo.azsli>
#include <Atom/Features/PostProcessing/FullscreenVertex.azsli>
#include "DepthOfField.azsli"
#include "NewDepthOfFieldCommon.azsli"

#include <viewsrg.srgi>

ShaderResourceGroup PassSrg : SRG_PerPass
{
    Texture2D<float4> m_colorAndCoc;
    Texture2D<float2> m_minMaxCocTile;

    float4 m_textureDimensions;

    NewDepthOfFieldConstants m_dofConstants;

    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

    Sampler PointSampler
    {
        MinFilter = Point;
        MagFilter = Point;
        MipFilter = Point;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };
}

float3 GetOffsetUV(uint index, float2 offsetMultiplier)
{
    float3 offset = PassSrg::m_dofConstants.samplePositions[index].xyz;
    offset.xy *= offsetMultiplier;
    return offset;
}

float CaclulateWeight(float offsetRadius, float samplingRadius, float sampleCoc, float centerCoc)
{
    // The maximum distance for which samples are valid is the min of the sample CoC and the center CoC
    float maxRadius = abs(min(sampleCoc, centerCoc));
    
    // radius = samplingRadius * offsetRadius;
    // falloff = maxRadius - radius;
    // weight = 1 + (4 * falloff) 
    float falloff = mad(-samplingRadius, offsetRadius, maxRadius);
    float weight = saturate(mad(4, falloff, 1));
    return weight;
}

PSOutput MainPS(VSOutput IN)
{
    // Get center sample
    float2 pixelUV = IN.m_texCoord;
    float4 color = PassSrg::m_colorAndCoc.Sample(PassSrg::LinearSampler, pixelUV).rgba;
    float centerCoc = color.a;

    // Get tile min and max
    int2 tile = int2(IN.m_position.xy) / 16;
    float minCoc = PassSrg::m_minMaxCocTile[tile].x;

    // Aspect ratio = texture.x / texture.y = dimensions.x * dimensions.w
    float aspectRatio = PassSrg::m_textureDimensions.x * PassSrg::m_textureDimensions.w;

    // Sampling radius
    float cocRadius = max( abs(centerCoc), -minCoc);
    float screenRadius = cocRadius * ViewSrg::m_dof.m_cocToScreenRatio * 0.5f;
    float2 offsetMultiplier = float2(screenRadius / aspectRatio, screenRadius);


    float4 backgroundColor = float4(0, 0, 0, 0);
    
    {
        float backgroundMin = min(0, centerCoc);
        color.rgb /= abs(color.a);
        color.a = 1;
        
        for(uint i = 0; i < SAMPLES_LOOP_TOTAL; ++i)
        {
            // Calculate sample offset
            float3 offset = GetOffsetUV(i, offsetMultiplier);
            
            // Get sample
            float4 sampleColorCoc = PassSrg::m_colorAndCoc.Sample(PassSrg::PointSampler, pixelUV + offset.xy).rgba;
            sampleColorCoc.rgb /= abs(sampleColorCoc.a);
            
            // Calculate weight for sample
            float weight = CaclulateWeight(offset.z, cocRadius, sampleColorCoc.a, centerCoc);
            sampleColorCoc.rgb *= weight;
            
            bool isBackground = (sampleColorCoc.a < backgroundMin);
            
            // We accumulate weight in alpha channel of color and backgroundColor
            sampleColorCoc.a = weight;
            
            // Accumulate
            backgroundColor += isBackground * sampleColorCoc;
            color += !isBackground * sampleColorCoc;
        }
    }
    
    float backgroundRatio = backgroundColor.a / float(SAMPLES_LOOP_TOTAL);
    float alpha = backgroundRatio > abs(centerCoc) ? -backgroundRatio : centerCoc;

    color.rgb /= max(color.a, COC_EPSILON);
    backgroundColor.rgb /= max(backgroundColor.a, COC_EPSILON);
    
    color = color * saturate(1 - backgroundRatio) + backgroundColor * backgroundRatio;
    //color.rgb += backgroundColor.rgb;



    PSOutput OUT = (PSOutput)0;
    OUT.m_color.rgb = color.rgb;
    OUT.m_color.a = alpha;
    return OUT;
}

