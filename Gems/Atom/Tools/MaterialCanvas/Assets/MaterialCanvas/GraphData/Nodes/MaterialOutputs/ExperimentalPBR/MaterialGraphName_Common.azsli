/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#define ENABLE_CLEAR_COAT               0
#define ENABLE_TRANSMISSION             0
#define ENABLE_AREA_LIGHT_VALIDATION    0
#define ENABLE_SHADER_DEBUGGING         0
#define OUTPUT_SUBSURFACE               0
#define OUTPUT_DEPTH                    0
#define FORCE_OPAQUE                    1
#define ENABLE_PARALLAX                 0 // Disabled until parallax depth functions can be rewritten to not pass in the heightmap or sampler from the material SRG
#define UvSetCount                      2

#include <scenesrg.srgi>
#include <viewsrg.srgi>

#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/Features/SrgSemantics.azsli>

// Everything inside of the generated blocks will eventually be replaced in the generated files as the material graph is compiled. 

// O3DE_GENERATED_INCLUDES_BEGIN
// O3DE_GENERATED_INCLUDES_END

ShaderResourceGroup MaterialSrg : SRG_PerMaterial
{
    // O3DE_GENERATED_MATERIAL_SRG_BEGIN
    // O3DE_GENERATED_MATERIAL_SRG_END
};
 
// O3DE_GENERATED_CLASSES_BEGIN
// O3DE_GENERATED_CLASSES_END
 
// O3DE_GENERATED_FUNCTIONS_BEGIN
// O3DE_GENERATED_FUNCTIONS_END

struct CommonVSInput
{
    float3 m_position : POSITION;
    float3 m_normal : NORMAL;
    float4 m_tangent : TANGENT;
    float2 m_uv0 : UV0;
    float2 m_uv1 : UV1;
};

struct CommonVSOutput
{
    precise linear centroid float4 m_position : SV_Position;
    float3 m_normal: NORMAL;
    float4 m_tangent : TANGENT;
    float2 m_uv0 : UV0;
    float2 m_uv1 : UV1;
    float3 m_worldPosition : UV3;
};

CommonVSOutput Evaluate_CommonVertexData(CommonVSInput IN)
{
    float3 worldPosition = (float3)mul(ObjectSrg::GetWorldMatrix(), float4(IN.m_position, 1.0));
    float4x4 objectToWorld = ObjectSrg::GetWorldMatrix();
    float3x3 objectToWorldIT = ObjectSrg::GetWorldMatrixInverseTranspose();

    float3 vertexNormal, vertexTangent, vertexBitangent;
    ConstructTBN(IN.m_normal, IN.m_tangent, objectToWorld, objectToWorldIT, vertexNormal, vertexTangent, vertexBitangent);

    #define O3DE_MC_POSITION IN.m_position
    #define O3DE_MC_UV(index) (index == 0 ? IN.m_uv0 : IN.m_uv1);
    #define O3DE_MC_NORMAL vertexNormal
    #define O3DE_MC_TANGENT vertexTangent
    #define O3DE_MC_BITANGENT vertexBitangent
    #define O3DE_MC_WORLD_POSITION worldPosition

    // O3DE_GENERATED_INSTRUCTIONS_BEGIN: inPositionOffset
    float3 inPositionOffset = {0.0, 0.0, 0.0};
    // O3DE_GENERATED_INSTRUCTIONS_END

    #undef O3DE_MC_POSITION
    #undef O3DE_MC_UV
    #undef O3DE_MC_NORMAL
    #undef O3DE_MC_TANGENT
    #undef O3DE_MC_BITANGENT
    #undef O3DE_MC_WORLD_POSITION

    CommonVSOutput OUT = (CommonVSOutput)0;
    OUT.m_worldPosition = worldPosition + (float3)inPositionOffset;
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(OUT.m_worldPosition, 1.0));
    OUT.m_normal = vertexNormal;
    OUT.m_tangent = float4(vertexTangent, 1.0);
    OUT.m_uv1 = IN.m_uv0;
    OUT.m_uv1 = IN.m_uv1;
    return OUT;
}

struct CommonPSOutput
{
    float3 m_baseColor;
    float3 m_emissive;
    float m_metallic;
    float m_roughness;
    float m_specularF0Factor;
    float m_alpha;
    float3 m_normal;
    float3 m_tangent;
    float3 m_bitangent;
};

CommonPSOutput Evaluate_CommonPixelData(CommonVSOutput IN)
{
    float4x4 objectToWorld = ObjectSrg::GetWorldMatrix();
    float3x3 objectToWorldIT = ObjectSrg::GetWorldMatrixInverseTranspose();

    float3 vertexNormal, vertexTangent, vertexBitangent;
    ConstructTBN(IN.m_normal, IN.m_tangent, objectToWorld, objectToWorldIT, vertexNormal, vertexTangent, vertexBitangent);

    #define O3DE_MC_POSITION IN.m_position
    #define O3DE_MC_UV(index) (index == 0 ? IN.m_uv0 : IN.m_uv1);
    #define O3DE_MC_NORMAL vertexNormal
    #define O3DE_MC_TANGENT vertexTangent
    #define O3DE_MC_BITANGENT vertexBitangent
    #define O3DE_MC_WORLD_POSITION IN.m_worldPosition

    // O3DE_GENERATED_INSTRUCTIONS_BEGIN: inBaseColor, inEmissive, inMetallic, inRoughness, inSpecularF0Factor
    float3 inBaseColor = {1.0, 1.0, 1.0};
    float3 inEmissive = {0.0, 0.0, 0.0};
    float inMetallic = 0.0;
    float inRoughness = 0.0;
    float inSpecularF0Factor = 0.0;
    // O3DE_GENERATED_INSTRUCTIONS_END

    #undef O3DE_MC_POSITION
    #undef O3DE_MC_UV
    #undef O3DE_MC_NORMAL
    #undef O3DE_MC_TANGENT
    #undef O3DE_MC_BITANGENT
    #undef O3DE_MC_WORLD_POSITION

    CommonPSOutput OUT = (CommonPSOutput)0;
    OUT.m_baseColor = inBaseColor;
    OUT.m_emissive = inEmissive;
    OUT.m_metallic = inMetallic;
    OUT.m_roughness = inRoughness;
    OUT.m_specularF0Factor = inSpecularF0Factor;
    OUT.m_alpha = 1.0;
    OUT.m_normal = vertexNormal;
    OUT.m_tangent = vertexTangent;
    OUT.m_bitangent = vertexBitangent;
    return OUT;
}
