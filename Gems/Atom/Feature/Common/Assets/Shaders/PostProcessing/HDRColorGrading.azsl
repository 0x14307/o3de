/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <Atom/RPI/Math.azsli>

#include <Atom/Features/SrgSemantics.azsli>

#include <Atom/Features/PostProcessing/FullscreenPixelInfo.azsli>
#include <Atom/Features/PostProcessing/FullscreenVertex.azsli>
#include <Atom/Features/PostProcessing/HDRColorGradingCommon.azsl>

ShaderResourceGroup PassSrg : SRG_PerPass_WithFallback
{
    // get the framebuffer
    Texture2D<float4> m_framebuffer;

    // framebuffer sampler
    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

    float m_colorGradingExposure;
    float m_colorGradingContrast;
    float m_colorGradingHueShift;
    float m_colorGradingPreSaturation;
    float m_colorFilterIntensity;
    float m_colorFilterMultiply;
    float m_whiteBalanceKelvin;
    float m_whiteBalanceTint;
    float m_splitToneBalance;
    float m_splitToneWeight;
    float m_colorGradingPostSaturation;
    float m_smhShadowsStart;
    float m_smhShadowsEnd;
    float m_smhHighlightsStart;
    float m_smhHighlightsEnd;
    float m_smhWeight;

    float3 m_channelMixingRed;
    float3 m_channelMixingGreen;
    float3 m_channelMixingBlue;

    float4 m_colorFilterSwatch;
    float4 m_splitToneShadowsColor;
    float4 m_splitToneHighlightsColor;

    float4 m_smhShadowsColor;
    float4 m_smhMidtonesColor;
    float4 m_smhHighlightsColor;
}

// perform color grading in ACEScg space
float3 ColorGrade(float3 frameColor)
{
    frameColor = ColorGradePostExposure(frameColor, PassSrg::m_colorGradingExposure);
    //frameColor = ColorGradeKelvinColorTemp(frameColor, PassSrg::m_whiteBalanceKelvin);
    frameColor = ColorGradingContrast(frameColor, AcesCcMidGrey, PassSrg::m_colorGradingContrast);
    frameColor = ColorGradeColorFilter(frameColor, PassSrg::m_colorFilterSwatch.rgb,
                                         PassSrg::m_colorFilterMultiply, PassSrg::m_colorFilterIntensity);
    frameColor = max(frameColor, 0.0);
    frameColor = ColorGradeSaturation(frameColor, PassSrg::m_colorGradingPreSaturation);
    frameColor = ColorGradeSplitTone(frameColor, PassSrg::m_splitToneBalance, PassSrg::m_splitToneWeight,
                                        PassSrg::m_splitToneShadowsColor, PassSrg::m_splitToneHighlightsColor);
    frameColor = ColorGradeChannelMixer(frameColor, PassSrg::m_channelMixingRed, PassSrg::m_channelMixingGreen, PassSrg::m_channelMixingBlue);
    frameColor = max(frameColor, 0.0);
    frameColor = ColorGradeShadowsMidtonesHighlights(frameColor, PassSrg::m_smhShadowsStart, PassSrg::m_smhShadowsEnd,
                                                    PassSrg::m_smhHighlightsStart, PassSrg::m_smhHighlightsEnd, PassSrg::m_smhWeight,
                                                    PassSrg::m_smhShadowsColor, PassSrg::m_smhMidtonesColor, PassSrg::m_smhHighlightsColor);
    frameColor = ColorGradeHueShift(frameColor, PassSrg::m_colorGradingHueShift);
    frameColor = ColorGradeSaturation(frameColor, PassSrg::m_colorGradingPostSaturation);
    return max(frameColor.rgb, 0.0);
}

PSOutput MainPS(VSOutput IN)
{
    PSOutput OUT;

    // Fetch the pixel color from the input texture
    float3 frameColor = PassSrg::m_framebuffer.Sample(PassSrg::LinearSampler, IN.m_texCoord).rgb;

    OUT.m_color.rgb = ColorGrade(frameColor);
    OUT.m_color.w = 1;

    return OUT;
}
