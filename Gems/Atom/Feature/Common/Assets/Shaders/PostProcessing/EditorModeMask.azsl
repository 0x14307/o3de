/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <viewsrg.srgi>

#include <Atom/RPI/ShaderResourceGroups/DefaultObjectSrg.azsli>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>

struct VSInput
{
    // Base fields (required by the template azsli file)...
    float3 m_position : POSITION;
};

struct VSOutput
{
    // Base fields (required by the template azsli file)...
    // "centroid" is needed for SV_Depth to compile
    precise linear centroid float4 m_position : SV_Position;
};

VSOutput MainVS(VSInput IN)
{
    VSOutput OUT;    
    float3 worldPosition = mul(ObjectSrg::GetWorldMatrix(), float4(IN.m_position, 1.0)).xyz;
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, float4(worldPosition, 1.0));

    // Offset the depth by a teeny bit to avoid z fighting with the underlying rendered data
    OUT.m_position.z += 0.001;

    // NDCs
    //float3 ndc = float3(OUT.m_position.x / OUT.m_position.w, OUT.m_position. y/ OUT.m_position.w, OUT.m_position.z / OUT.m_position.w);

    // Normalized screenspace UVs
    //float2 uv = float2((ndc.x + 1.0) * 0.5, (ndc.y + 1.0) * 0.5);

    // Fragment depth
    //float depth = ndc.z;

    return OUT;
}

struct PixelOutput
{
    float4 m_color : SV_Target0;
};

PixelOutput MainPS(VSOutput IN)
{
    PixelOutput OUT;
    OUT.m_color = float4(1.,1.,1.,1.);

    return OUT;
} 