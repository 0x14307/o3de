/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once


#include <Atom/RPI/TangentSpace.azsli>

VSOutput EvaluateVertexGeometry_BasePBR(
    float3 position,
    float3 normal,
    float4 tangent,
    float3 bitangent,
    float2 uv0,
    float2 uv1)
{
    VSOutput OUT;

    float4x4 objectToWorld = ObjectSrg::GetWorldMatrix();
    float4 worldPosition = mul(objectToWorld, float4(position, 1.0));
    OUT.m_worldPosition = worldPosition.xyz;
    OUT.m_position = mul(ViewSrg::m_viewProjectionMatrix, worldPosition);

    // By design, only UV0 is allowed to apply transforms.
    OUT.m_uv[0] = mul(MaterialSrg::m_uvMatrix, float3(uv0, 1.0)).xy;
    OUT.m_uv[1] = uv1;

    float3x3 objectToWorldIT = ObjectSrg::GetWorldMatrixInverseTranspose();
    ConstructTBN(normal, tangent, bitangent, objectToWorld, objectToWorldIT, OUT.m_normal, OUT.m_tangent, OUT.m_bitangent);

    return OUT;
}

VSOutput EvaluateVertexGeometry_BasePBR(VSInput IN)
{
    return EvaluateVertexGeometry_BasePBR(
        IN.m_position,
        IN.m_normal,
        IN.m_tangent,
        IN.m_bitangent,
        IN.m_uv0,
        IN.m_uv1);
}


#ifdef VERTEX_DATA_IS_BASE_PBR

#define     EvaluateVertexGeometry(IN)                  \
            EvaluateVertexGeometry_BasePBR(IN)

#endif
