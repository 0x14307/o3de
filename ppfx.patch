diff --git a/Gems/Atom/Feature/Common/Assets/Passes/FilmGrain.pass b/Gems/Atom/Feature/Common/Assets/Passes/FilmGrain.pass
new file mode 100644
index 0000000000..466db5df24
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Assets/Passes/FilmGrain.pass
@@ -0,0 +1,70 @@
+{
+    "Type": "JsonSerialization",
+    "Version": 1,
+    "ClassName": "PassAsset",
+    "ClassData": {
+        "PassTemplate": {
+            "Name": "FilmGrainTemplate",
+            "PassClass": "FilmGrainPass",
+            "Slots": [
+                {
+                    "Name": "Input",
+                    "SlotType": "Input",
+                    "ScopeAttachmentUsage": "Shader"
+                },
+                {
+                    "Name": "Output",
+                    "SlotType": "Output",
+                    "ScopeAttachmentUsage": "Shader",
+                    "LoadStoreAction": {
+                        "LoadAction": "Clear"
+                    }
+                }
+            ],
+            "ImageAttachments": [
+                {
+                    "Name": "FilmGrain",
+                    "SizeSource": {
+                        "Source": {
+                            "Pass": "This",
+                            "Attachment": "Input"
+                        }
+                    },
+                    "FormatSource": {
+                        "Pass": "This",
+                        "Attachment": "Input"
+                    },
+                    "ImageDescriptor": {
+                        "SharedQueueMask": "Graphics",
+                        "BindFlags": [
+                            "Color",
+                            "ShaderReadWrite"
+                        ]
+                    }
+                }
+            ],
+            "Connections": [
+                {
+                    "LocalSlot": "Output",
+                    "AttachmentRef": {
+                        "Pass": "This",
+                        "Attachment": "FilmGrain"
+                    }
+                }
+            ],
+            "FallbackConnections": [
+                {
+                    "Input": "Input",
+                    "Output": "Output"
+                }
+            ],
+            "PassData": {
+                "$type": "ComputePassData",
+                "ShaderAsset": {
+                    "FilePath": "Shaders/PostProcessing/FilmGrain.shader"
+                },
+                "Make Fullscreen Pass": true
+            }
+        }
+    }
+}
diff --git a/Gems/Atom/Feature/Common/Assets/Passes/PaniniProjection.pass b/Gems/Atom/Feature/Common/Assets/Passes/PaniniProjection.pass
new file mode 100644
index 0000000000..f3c1ff9fe1
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Assets/Passes/PaniniProjection.pass
@@ -0,0 +1,70 @@
+{
+    "Type": "JsonSerialization",
+    "Version": 1,
+    "ClassName": "PassAsset",
+    "ClassData": {
+        "PassTemplate": {
+            "Name": "PaniniProjectionTemplate",
+            "PassClass": "PaniniProjectionPass",
+            "Slots": [
+                {
+                    "Name": "Input",
+                    "SlotType": "Input",
+                    "ScopeAttachmentUsage": "Shader"
+                },
+                {
+                    "Name": "Output",
+                    "SlotType": "Output",
+                    "ScopeAttachmentUsage": "Shader",
+                    "LoadStoreAction": {
+                        "LoadAction": "Clear"
+                    }
+                }
+            ],
+            "ImageAttachments": [
+                {
+                    "Name": "PaniniProjection",
+                    "SizeSource": {
+                        "Source": {
+                            "Pass": "This",
+                            "Attachment": "Input"
+                        }
+                    },
+                    "FormatSource": {
+                        "Pass": "This",
+                        "Attachment": "Input"
+                    },
+                    "ImageDescriptor": {
+                        "SharedQueueMask": "Graphics",
+                        "BindFlags": [
+                            "Color",
+                            "ShaderReadWrite"
+                        ]
+                    }
+                }
+            ],
+            "Connections": [
+                {
+                    "LocalSlot": "Output",
+                    "AttachmentRef": {
+                        "Pass": "This",
+                        "Attachment": "PaniniProjection"
+                    }
+                }
+            ],
+            "FallbackConnections": [
+                {
+                    "Input": "Input",
+                    "Output": "Output"
+                }
+            ],
+            "PassData": {
+                "$type": "ComputePassData",
+                "ShaderAsset": {
+                    "FilePath": "Shaders/PostProcessing/PaniniProjection.shader"
+                },
+                "Make Fullscreen Pass": true
+            }
+        }
+    }
+}
diff --git a/Gems/Atom/Feature/Common/Assets/Passes/PassTemplates.azasset b/Gems/Atom/Feature/Common/Assets/Passes/PassTemplates.azasset
index 497b2d3e96..d14b5f5247 100644
--- a/Gems/Atom/Feature/Common/Assets/Passes/PassTemplates.azasset
+++ b/Gems/Atom/Feature/Common/Assets/Passes/PassTemplates.azasset
@@ -511,6 +511,18 @@
             {
                 "Name": "ChromaticAberrationTemplate",
                 "Path": "Passes/ChromaticAberration.pass"
+            },
+            {
+                "Name": "PaniniProjectionTemplate",
+                "Path": "Passes/PaniniProjection.pass"
+            }, 
+            {
+                "Name": "FilmGrainTemplate",
+                "Path": "Passes/FilmGrain.pass"
+            },
+            {
+                "Name": "VignetteTemplate",
+                "Path": "Passes/Vignette.pass"
             }
         ]
     }
diff --git a/Gems/Atom/Feature/Common/Assets/Passes/PostProcessParent.pass b/Gems/Atom/Feature/Common/Assets/Passes/PostProcessParent.pass
index eef8c7565e..a48eb78a62 100644
--- a/Gems/Atom/Feature/Common/Assets/Passes/PostProcessParent.pass
+++ b/Gems/Atom/Feature/Common/Assets/Passes/PostProcessParent.pass
@@ -44,7 +44,7 @@
                 {
                     "LocalSlot": "Output",
                     "AttachmentRef": {
-                        "Pass": "ChromaticAberrationPass",
+                        "Pass": "VignettePass",
                         "Attachment": "Output"
                     }
                 },
@@ -215,7 +215,67 @@
 			                }
 			            }
 		            ]
-		        }
+		        },
+                {
+                    "Name": "PaniniProjectionPass",
+                    "TemplateName": "PaniniProjectionTemplate",
+                    "Connections": [
+                        {
+                            "LocalSlot": "Input",
+                            "AttachmentRef": {
+                                "Pass": "ChromaticAberrationPass",
+                                "Attachment": "Output"
+                            }
+                        }
+                    ]
+                },
+                {
+                    "Name": "FilmGrainPass",
+                    "TemplateName": "FilmGrainTemplate",
+                    "Connections": [
+                        {
+                            "LocalSlot": "Input",
+                            "AttachmentRef": {
+                                "Pass": "PaniniProjectionPass",
+                                "Attachment": "Output"
+                            }
+                        }
+                    ]
+                },
+                {
+                    "Name": "VignettePass",
+                    "TemplateName": "VignetteTemplate",
+                    "Connections": [
+                        {
+                            "LocalSlot": "Input",
+                            "AttachmentRef": {
+                                "Pass": "FilmGrainPass",
+                                "Attachment": "Output"
+                            }
+                        }
+                    ]
+                },
+                {
+                    "Name": "EditorModeFeedbackPassParent",
+                    "TemplateName": "EditorModeFeedbackParentTemplate",
+                    "Enabled": true,
+                    "Connections": [
+                        {
+                            "LocalSlot": "InputDepth",
+                            "AttachmentRef": {
+                                "Pass": "Parent",
+                                "Attachment": "Depth"
+                            }
+                        },
+                        {
+                            "LocalSlot": "InputColor",
+                            "AttachmentRef": {
+                                "Pass": "VignettePass",
+                                "Attachment": "Output"
+                            }
+                        }
+                    ]
+                }
             ]
         }
     }
diff --git a/Gems/Atom/Feature/Common/Assets/Passes/Vignette.pass b/Gems/Atom/Feature/Common/Assets/Passes/Vignette.pass
new file mode 100644
index 0000000000..ace95da2d3
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Assets/Passes/Vignette.pass
@@ -0,0 +1,70 @@
+{
+    "Type": "JsonSerialization",
+    "Version": 1,
+    "ClassName": "PassAsset",
+    "ClassData": {
+        "PassTemplate": {
+            "Name": "VignetteTemplate",
+            "PassClass": "VignettePass",
+            "Slots": [
+                {
+                    "Name": "Input",
+                    "SlotType": "Input",
+                    "ScopeAttachmentUsage": "Shader"
+                },
+                {
+                    "Name": "Output",
+                    "SlotType": "Output",
+                    "ScopeAttachmentUsage": "Shader",
+                    "LoadStoreAction": {
+                        "LoadAction": "Clear"
+                    }
+                }
+            ],
+            "ImageAttachments": [
+                {
+                    "Name": "Vignette",
+                    "SizeSource": {
+                        "Source": {
+                            "Pass": "This",
+                            "Attachment": "Input"
+                        }
+                    },
+                    "FormatSource": {
+                        "Pass": "This",
+                        "Attachment": "Input"
+                    },
+                    "ImageDescriptor": {
+                        "SharedQueueMask": "Graphics",
+                        "BindFlags": [
+                            "Color",
+                            "ShaderReadWrite"
+                        ]
+                    }
+                }
+            ],
+            "Connections": [
+                {
+                    "LocalSlot": "Output",
+                    "AttachmentRef": {
+                        "Pass": "This",
+                        "Attachment": "Vignette"
+                    }
+                }
+            ],
+            "FallbackConnections": [
+                {
+                    "Input": "Input",
+                    "Output": "Output"
+                }
+            ],
+            "PassData": {
+                "$type": "ComputePassData",
+                "ShaderAsset": {
+                    "FilePath": "Shaders/PostProcessing/Vignette.shader"
+                },
+                "Make Fullscreen Pass": true
+            }
+        }
+    }
+}
diff --git a/Gems/Atom/Feature/Common/Assets/Shaders/PostProcessing/FilmGrain.azsl b/Gems/Atom/Feature/Common/Assets/Shaders/PostProcessing/FilmGrain.azsl
new file mode 100644
index 0000000000..ee1c6685bc
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Assets/Shaders/PostProcessing/FilmGrain.azsl
@@ -0,0 +1,65 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <scenesrg.srgi>
+
+ShaderResourceGroup PassSrg : SRG_PerPass
+{
+    Texture2D<float4> m_inputColor;
+    RWTexture2D<float4> m_outputColor;
+    Texture2D<float4> m_grain;
+
+    Sampler m_sampler
+    {
+        AddressU = Mirror;
+        AddressV = Mirror;
+        AddressW = Mirror;
+    };
+
+    // Must match the struct in FilmGrainPass.cpp
+    struct Constants
+    {
+        uint2 m_outputSize; // texture size of output
+        uint2 m_grainTextureSize; // texture size of grain noise
+        float m_intensity; // intensity of effect (0 to 1)
+        float m_luminanceDampening; // factor for dampening effect in areas of high and low luminance
+        float m_tilingScale; // scaling factor for tiling
+    };
+    Constants m_constants;
+}
+
+[numthreads(8, 8, 1)]
+void MainCS(uint3 dispatchThreadID : SV_DispatchThreadID)
+{
+    if (dispatchThreadID.x >= PassSrg::m_constants.m_outputSize.x || dispatchThreadID.y >= PassSrg::m_constants.m_outputSize.y)
+    {
+        return;
+    }
+
+    float3 rgb = PassSrg::m_inputColor[dispatchThreadID.xy].rgb;
+
+    // Determine UV wrt tiling scale and vary UV according to time
+    // The float2 is random and acts as a way of "skipping" across the grain texture
+    // The multiplier is equivalent to dividing by 1/24, mimicing a frame rate of 24fps as found inin many films
+    float2 grainUV = PassSrg::m_constants.m_tilingScale * dispatchThreadID.xy / PassSrg::m_constants.m_grainTextureSize;
+    grainUV += float2(0.6379, 1.7358) * trunc(SceneSrg::m_time * 24);
+
+    // Determine grain
+    float grain = PassSrg::m_grain.SampleLevel(PassSrg::m_sampler, grainUV, 0).r;
+
+    // Apply dampening
+    // Note: magic numbers correspond to the contribution of each channel to luminance
+    // Note: dampening is applied based on the formula y = 4x(1-x^2), which means that y=1 when x=0.5 and drops off to y=0 at x=0 and x=1
+    float lum = dot(rgb, float3(0.21, 0.72, 0.07));
+    grain *= lerp(1, (lum - lum * lum) * 4, PassSrg::m_constants.m_luminanceDampening);
+
+    // Apply intensity
+    rgb = lerp(rgb, grain, PassSrg::m_constants.m_intensity);
+
+    PassSrg::m_outputColor[dispatchThreadID.xy] = float4(rgb.r, rgb.g, rgb.b, PassSrg::m_inputColor[dispatchThreadID.xy].a);
+}
diff --git a/Gems/Atom/Feature/Common/Assets/Shaders/PostProcessing/FilmGrain.shader b/Gems/Atom/Feature/Common/Assets/Shaders/PostProcessing/FilmGrain.shader
new file mode 100644
index 0000000000..d56e0a983f
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Assets/Shaders/PostProcessing/FilmGrain.shader
@@ -0,0 +1,14 @@
+{
+    "Source": "FilmGrain.azsl",
+
+    "ProgramSettings": 
+    {
+        "EntryPoints": 
+        [
+            {
+                "name": "MainCS",
+                "type": "Compute"
+            }
+        ]
+    }
+}
diff --git a/Gems/Atom/Feature/Common/Assets/Shaders/PostProcessing/PaniniProjection.azsl b/Gems/Atom/Feature/Common/Assets/Shaders/PostProcessing/PaniniProjection.azsl
new file mode 100644
index 0000000000..139336fb7a
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Assets/Shaders/PostProcessing/PaniniProjection.azsl
@@ -0,0 +1,55 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <scenesrg.srgi>
+
+ShaderResourceGroup PassSrg : SRG_PerPass
+{
+    Texture2D<float4> m_inputColor;
+    RWTexture2D<float4> m_outputColor;
+
+    // Must match the struct in PaniniProjectionPass.cpp
+    struct Constants
+    {
+        uint2 m_outputSize; // texture size of output
+        float2 m_outputCenter; // center of image in pixel coords
+        float m_depth; // factor for modifying projection
+    };
+    Constants m_constants;
+}
+
+[numthreads(8, 8, 1)]
+void MainCS(uint3 dispatchThreadID : SV_DispatchThreadID)
+{
+    if (dispatchThreadID.x >= PassSrg::m_constants.m_outputSize.x || dispatchThreadID.y >= PassSrg::m_constants.m_outputSize.y)
+    {
+        return;
+    }
+    
+    //Original paper: http://tksharpless.net/vedutismo/Pannini/panini.pdf
+    //Where o, p, s, q, l are the origin, new focal point, tangent point of view and panosphere,
+    //intersection of this pixels line of sight and panosphere, and q transformed onto ps parallel to the view, respectively
+    
+    float2 uv = (dispatchThreadID.xy - PassSrg::m_constants.m_outputCenter) / PassSrg::m_constants.m_outputCenter;
+    float d = PassSrg::m_constants.m_depth;
+    
+    // Find ol/os ratio. This will be the same as oq/ox
+    // Note ol and ol/os are the same since os=1, so we will call it ol here since we will be using it below in that context
+    // Use complimentary uv.x^2 to facilitate cropping
+    float ol = 1 / sqrt(1 + (1 - abs(uv.x * uv.x)));
+    
+    // Find ps/pl ratio. This will be the same as pe/pq
+    float pspl = (d + 1) / (d + ol);
+    
+    // Transform coords
+    float2 coords = uv * (ol * pspl);
+    
+    coords = coords * PassSrg::m_constants.m_outputCenter + PassSrg::m_constants.m_outputCenter;
+
+    PassSrg::m_outputColor[dispatchThreadID.xy] = PassSrg::m_inputColor[coords];
+}
diff --git a/Gems/Atom/Feature/Common/Assets/Shaders/PostProcessing/PaniniProjection.shader b/Gems/Atom/Feature/Common/Assets/Shaders/PostProcessing/PaniniProjection.shader
new file mode 100644
index 0000000000..b15502fd95
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Assets/Shaders/PostProcessing/PaniniProjection.shader
@@ -0,0 +1,14 @@
+{
+    "Source": "PaniniProjection.azsl",
+
+    "ProgramSettings": 
+    {
+        "EntryPoints": 
+        [
+            {
+                "name": "MainCS",
+                "type": "Compute"
+            }
+        ]
+    }
+}
diff --git a/Gems/Atom/Feature/Common/Assets/Shaders/PostProcessing/Vignette.azsl b/Gems/Atom/Feature/Common/Assets/Shaders/PostProcessing/Vignette.azsl
new file mode 100644
index 0000000000..ac6a006ab4
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Assets/Shaders/PostProcessing/Vignette.azsl
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <scenesrg.srgi>
+
+ShaderResourceGroup PassSrg : SRG_PerPass
+{
+    Texture2D<float4> m_inputColor;
+    RWTexture2D<float4> m_outputColor;
+
+    // Must match the struct in VignettePass.cpp
+    struct Constants
+    {
+        uint2 m_outputSize; // texture size of output
+        float2 m_outputCenter; // center of image in pixel coords
+        float m_intensity; // strength of effect (0 to 1), i.e. displacement of channels
+    };
+    Constants m_constants;
+}
+
+[numthreads(8, 8, 1)]
+void MainCS(uint3 dispatchThreadID : SV_DispatchThreadID)
+{
+    if (dispatchThreadID.x >= PassSrg::m_constants.m_outputSize.x || dispatchThreadID.y >= PassSrg::m_constants.m_outputSize.y)
+    {
+        return;
+    }
+
+    // Displacement from center of screen as a ratio (methods that measure from edges tend to involve either a "square" appearance or extra calculations)
+    float2 disp = (dispatchThreadID.xy - PassSrg::m_constants.m_outputCenter) / PassSrg::m_constants.m_outputCenter;
+
+    // The dot product essentially gets us the square magnitude, which is cheaper than magnituded
+    // Furthermore, we do not want a linear dropoff. By using sq mag this non linear feature is built in
+    float vig = dot(disp, disp) * PassSrg::m_constants.m_intensity;
+
+    float3 output = mad(vig, -PassSrg::m_inputColor[dispatchThreadID.xy].rgb, PassSrg::m_inputColor[dispatchThreadID.xy].rgb);
+
+    PassSrg::m_outputColor[dispatchThreadID.xy] = float4(output.r, output.g, output.b, PassSrg::m_inputColor[dispatchThreadID.xy].a);
+}
diff --git a/Gems/Atom/Feature/Common/Assets/Shaders/PostProcessing/Vignette.shader b/Gems/Atom/Feature/Common/Assets/Shaders/PostProcessing/Vignette.shader
new file mode 100644
index 0000000000..73669f6623
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Assets/Shaders/PostProcessing/Vignette.shader
@@ -0,0 +1,14 @@
+{
+    "Source": "Vignette.azsl",
+
+    "ProgramSettings": 
+    {
+        "EntryPoints": 
+        [
+            {
+                "name": "MainCS",
+                "type": "Compute"
+            }
+        ]
+    }
+}
diff --git a/Gems/Atom/Feature/Common/Assets/Textures/FilmGrain.jpg b/Gems/Atom/Feature/Common/Assets/Textures/FilmGrain.jpg
new file mode 100644
index 0000000000..865d60c339
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Assets/Textures/FilmGrain.jpg
@@ -0,0 +1,3 @@
+version https://git-lfs.github.com/spec/v1
+oid sha256:9152fa6ae2a61b09362d04f3aca801f5833e1985161f3b570020f1e343ec3415
+size 54443
diff --git a/Gems/Atom/Feature/Common/Assets/atom_feature_common_asset_files.cmake b/Gems/Atom/Feature/Common/Assets/atom_feature_common_asset_files.cmake
index 489fc528a2..7218fead85 100644
--- a/Gems/Atom/Feature/Common/Assets/atom_feature_common_asset_files.cmake
+++ b/Gems/Atom/Feature/Common/Assets/atom_feature_common_asset_files.cmake
@@ -120,6 +120,9 @@ set(FILES
     Passes/CheckerboardResolveColor.pass
     Passes/CheckerboardResolveDepth.pass
     Passes/ChromaticAberration.pass
+    Passes/PaniniProjection.pass
+    Passes/FilmGrain.pass
+    Passes/Vignette.pass
     Passes/ContrastAdaptiveSharpening.pass
     Passes/ConvertToAcescg.pass
     Passes/DebugOverlayParent.pass
@@ -238,6 +241,7 @@ set(FILES
     Passes/TransparentParent.pass
     Passes/UI.pass
     Passes/UIParent.pass
+    Passes/Vignette.pass
     Scripts/material_find_overrides_demo.lua
     Scripts/material_property_overrides_demo.lua
     ShaderLib/3rdParty/Features/PostProcessing/KelvinToRgb.azsli
@@ -408,9 +412,15 @@ set(FILES
     Shaders/PostProcessing/BloomCompositeCS.azsl
     Shaders/PostProcessing/BloomCompositeCS.shader
     Shaders/PostProcessing/BloomDownsampleCS.azsl
-    Shaders/PostProcessing/BloomDownsampleCS.shader
+    Shaders/PostProcessing/BloomDownsampleCS.shader    
     Shaders/PostProcessing/ChromaticAberration.azsl
     Shaders/PostProcessing/ChromaticAberration.shader
+    Shaders/PostProcessing/PaniniProjection.azsl
+    Shaders/PostProcessing/PaniniProjection.shader    
+    Shaders/PostProcessing/FilmGrain.azsl
+    Shaders/PostProcessing/FilmGrain.shader
+    Shaders/PostProcessing/Vignette.azsl
+    Shaders/PostProcessing/Vignette.shader
     Shaders/PostProcessing/ContrastAdaptiveSharpening.azsl
     Shaders/PostProcessing/ContrastAdaptiveSharpening.shader
     Shaders/PostProcessing/ConvertToAcescg.azsl
diff --git a/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/FilmGrain/FilmGrainConstants.h b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/FilmGrain/FilmGrainConstants.h
new file mode 100644
index 0000000000..eb1d7abcce
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/FilmGrain/FilmGrainConstants.h
@@ -0,0 +1,23 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+namespace AZ
+{
+    namespace Render
+    {
+        namespace FilmGrain
+        {
+            static constexpr float DefaultIntensity = 0.2f;
+            static constexpr float DefaultLuminanceDampening = 0.0f;
+            static constexpr float DefaultTilingScale = 1.0f;
+            static const constexpr char* DefaultGrainPath = "textures/FilmGrain.jpg.streamingimage";
+        } // namespace FilmGrain
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/FilmGrain/FilmGrainParams.inl b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/FilmGrain/FilmGrainParams.inl
new file mode 100644
index 0000000000..df00d0f815
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/FilmGrain/FilmGrainParams.inl
@@ -0,0 +1,28 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+// Macros below are of the form:
+// PARAM(NAME, MEMBER_NAME, DEFAULT_VALUE, ...)
+
+AZ_GFX_BOOL_PARAM(Enabled, m_enabled, false)
+AZ_GFX_ANY_PARAM_BOOL_OVERRIDE(bool, Enabled, m_enabled)
+
+// Intensity of effect
+AZ_GFX_FLOAT_PARAM(Intensity, m_intensity, FilmGrain::DefaultIntensity)
+AZ_GFX_FLOAT_PARAM_FLOAT_OVERRIDE(float, Intensity, m_intensity)
+
+// Dampening
+AZ_GFX_FLOAT_PARAM(LuminanceDampening, m_luminanceDampening, FilmGrain::DefaultLuminanceDampening)
+AZ_GFX_FLOAT_PARAM_FLOAT_OVERRIDE(float, LuminanceDampening, m_luminanceDampening)
+
+// Scaling
+AZ_GFX_FLOAT_PARAM(TilingScale, m_tilingScale, FilmGrain::DefaultTilingScale)
+AZ_GFX_FLOAT_PARAM_FLOAT_OVERRIDE(float, TilingScale, m_tilingScale)
+
+// Grain Source
+AZ_GFX_TEXTURE2D_PARAM(GrainPath, m_grainPath, FilmGrain::DefaultGrainPath)
diff --git a/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/FilmGrain/FilmGrainSettingsInterface.h b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/FilmGrain/FilmGrainSettingsInterface.h
new file mode 100644
index 0000000000..3bc7fa01c2
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/FilmGrain/FilmGrainSettingsInterface.h
@@ -0,0 +1,33 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainConstants.h>
+#include <AzCore/Component/EntityId.h>
+#include <AzCore/RTTI/RTTI.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        class FilmGrainSettingsInterface
+        {
+        public:
+            AZ_RTTI(AZ::Render::FilmGrainSettingsInterface, "{47FDB29D-7448-4FC2-9E7D-AFAD7FD52EE4}");
+
+            // Auto-gen virtual getter and setter functions...
+#include <Atom/Feature/ParamMacros/StartParamFunctionsVirtual.inl>
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+
+            virtual void OnConfigChanged() = 0;
+        };
+
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionConstants.h b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionConstants.h
new file mode 100644
index 0000000000..8eb4ae1568
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionConstants.h
@@ -0,0 +1,20 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+namespace AZ
+{
+    namespace Render
+    {
+        namespace PaniniProjection
+        {
+            static constexpr float DefaultDepth = 1.0f;
+        } // namespace PaniniProjection
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionParams.inl b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionParams.inl
new file mode 100644
index 0000000000..f9b07604ce
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionParams.inl
@@ -0,0 +1,17 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+// Macros below are of the form:
+// PARAM(NAME, MEMBER_NAME, DEFAULT_VALUE, ...)
+
+AZ_GFX_BOOL_PARAM(Enabled, m_enabled, false)
+AZ_GFX_ANY_PARAM_BOOL_OVERRIDE(bool, Enabled, m_enabled)
+
+// Intensity of effect
+AZ_GFX_FLOAT_PARAM(Depth, m_depth, PaniniProjection::DefaultDepth)
+AZ_GFX_FLOAT_PARAM_FLOAT_OVERRIDE(float, Depth, m_depth)
diff --git a/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionSettingsInterface.h b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionSettingsInterface.h
new file mode 100644
index 0000000000..6c17eb1326
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionSettingsInterface.h
@@ -0,0 +1,33 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionConstants.h>
+#include <AzCore/Component/EntityId.h>
+#include <AzCore/RTTI/RTTI.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        class PaniniProjectionSettingsInterface
+        {
+        public:
+            AZ_RTTI(AZ::Render::PaniniProjectionSettingsInterface, "{755D76BA-75EE-4519-A1FC-4D882DED8752}");
+
+            // Auto-gen virtual getter and setter functions...
+#include <Atom/Feature/ParamMacros/StartParamFunctionsVirtual.inl>
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+
+            virtual void OnConfigChanged() = 0;
+        };
+
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/PostProcessSettings.inl b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/PostProcessSettings.inl
index 4f05023d19..2713b9d792 100644
--- a/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/PostProcessSettings.inl
+++ b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/PostProcessSettings.inl
@@ -26,4 +26,7 @@ POST_PROCESS_MEMBER(SsaoSettings, m_ssaoSettings)
 POST_PROCESS_MEMBER(LookModificationSettings, m_lookModificationSettings)
 POST_PROCESS_MEMBER(DeferredFogSettings, m_deferredFogSettings)
 POST_PROCESS_MEMBER(HDRColorGradingSettings, m_hdrColorGradingSettings)
-POST_PROCESS_MEMBER(ChromaticAberrationSettings, m_chromaticAberrationSettings)
+POST_PROCESS_MEMBER(ChromaticAberrationSettings, m_ChromaticAberrationSettings)
+POST_PROCESS_MEMBER(PaniniProjectionSettings, m_PaniniProjectionSettings)
+POST_PROCESS_MEMBER(FilmGrainSettings, m_FilmGrainSettings)
+POST_PROCESS_MEMBER(VignetteSettings, m_VignetteSettings)
diff --git a/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/PostProcessSettingsInterface.h b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/PostProcessSettingsInterface.h
index 15dcb986f6..31e1389102 100644
--- a/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/PostProcessSettingsInterface.h
+++ b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/PostProcessSettingsInterface.h
@@ -11,6 +11,9 @@
 #include <AzCore/RTTI/RTTI.h>
 #include <Atom/Feature/PostProcess/Bloom/BloomSettingsInterface.h>
 #include <Atom/Feature/PostProcess/ChromaticAberration/ChromaticAberrationSettingsInterface.h>
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionSettingsInterface.h>
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainSettingsInterface.h>
+#include <Atom/Feature/PostProcess/Vignette/VignetteSettingsInterface.h>
 #include <Atom/Feature/PostProcess/DepthOfField/DepthOfFieldSettingsInterface.h>
 #include <Atom/Feature/PostProcess/ExposureControl/ExposureControlSettingsInterface.h>
 #include <Atom/Feature/PostProcess/Ssao/SsaoSettingsInterface.h>
diff --git a/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/Vignette/VignetteConstants.h b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/Vignette/VignetteConstants.h
new file mode 100644
index 0000000000..f46331b116
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/Vignette/VignetteConstants.h
@@ -0,0 +1,20 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+namespace AZ
+{
+    namespace Render
+    {
+        namespace Vignette
+        {
+            static constexpr float DefaultIntensity = 0.01f;
+        } // namespace Vignette
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/Vignette/VignetteParams.inl b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/Vignette/VignetteParams.inl
new file mode 100644
index 0000000000..1e2c1287bd
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/Vignette/VignetteParams.inl
@@ -0,0 +1,17 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+// Macros below are of the form:
+// PARAM(NAME, MEMBER_NAME, DEFAULT_VALUE, ...)
+
+AZ_GFX_BOOL_PARAM(Enabled, m_enabled, false)
+AZ_GFX_ANY_PARAM_BOOL_OVERRIDE(bool, Enabled, m_enabled)
+
+// Intensity of effect
+AZ_GFX_FLOAT_PARAM(Intensity, m_intensity, Vignette::DefaultIntensity)
+AZ_GFX_FLOAT_PARAM_FLOAT_OVERRIDE(float, Intensity, m_intensity)
diff --git a/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/Vignette/VignetteSettingsInterface.h b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/Vignette/VignetteSettingsInterface.h
new file mode 100644
index 0000000000..8bcb0e6150
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Include/Atom/Feature/PostProcess/Vignette/VignetteSettingsInterface.h
@@ -0,0 +1,33 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <Atom/Feature/PostProcess/Vignette/VignetteConstants.h>
+#include <AzCore/Component/EntityId.h>
+#include <AzCore/RTTI/RTTI.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        class VignetteSettingsInterface
+        {
+        public:
+            AZ_RTTI(AZ::Render::VignetteSettingsInterface, "{FDBB7B33-DD8B-48A7-BB01-6558984F6771}");
+
+            // Auto-gen virtual getter and setter functions...
+#include <Atom/Feature/ParamMacros/StartParamFunctionsVirtual.inl>
+#include <Atom/Feature/PostProcess/Vignette/VignetteParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+
+            virtual void OnConfigChanged() = 0;
+        };
+
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/Source/CommonSystemComponent.cpp b/Gems/Atom/Feature/Common/Code/Source/CommonSystemComponent.cpp
index 5db422111f..0f956469ee 100644
--- a/Gems/Atom/Feature/Common/Code/Source/CommonSystemComponent.cpp
+++ b/Gems/Atom/Feature/Common/Code/Source/CommonSystemComponent.cpp
@@ -70,6 +70,9 @@
 #include <PostProcessing/BloomBlurPass.h>
 #include <PostProcessing/BloomCompositePass.h>
 #include <PostProcessing/ChromaticAberrationPass.h>
+#include <PostProcessing/PaniniProjectionPass.h>
+#include <PostProcessing/FilmGrainPass.h>
+#include <PostProcessing/VignettePass.h>
 #include <ScreenSpace/DeferredFogPass.h>
 #include <Shadows/ProjectedShadowFeatureProcessor.h>
 #include <SkyAtmosphere/SkyAtmosphereFeatureProcessor.h>
@@ -269,9 +272,18 @@ namespace AZ
             passSystem->AddPassCreator(Name("BloomBlurPass"), &BloomBlurPass::Create);
             passSystem->AddPassCreator(Name("BloomCompositePass"), &BloomCompositePass::Create);
 
-            // Add Chromatic Aberration
+            // Add ChromaticAberration
             passSystem->AddPassCreator(Name("ChromaticAberrationPass"), &ChromaticAberrationPass::Create);
 
+            // Add PaniniProjection
+            passSystem->AddPassCreator(Name("PaniniProjectionPass"), &PaniniProjectionPass::Create);
+
+            // Add FilmGrain
+            passSystem->AddPassCreator(Name("FilmGrainPass"), &FilmGrainPass::Create);
+
+            // Add Vignette
+            passSystem->AddPassCreator(Name("VignettePass"), &VignettePass::Create);
+
             // Add Luminance Histogram pass
             passSystem->AddPassCreator(Name("LuminanceHistogramGeneratorPass"), &LuminanceHistogramGeneratorPass::Create);
 
diff --git a/Gems/Atom/Feature/Common/Code/Source/PostProcess/FilmGrain/FilmGrainSettings.cpp b/Gems/Atom/Feature/Common/Code/Source/PostProcess/FilmGrain/FilmGrainSettings.cpp
new file mode 100644
index 0000000000..45ce3c1692
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Source/PostProcess/FilmGrain/FilmGrainSettings.cpp
@@ -0,0 +1,93 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <PostProcess/FilmGrain/FilmGrainSettings.h>
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainConstants.h>
+
+#include <PostProcess/PostProcessFeatureProcessor.h>
+
+#include <AzCore/Serialization/SerializeContext.h>
+
+#include <Atom/RPI.Public/Image/ImageSystemInterface.h>
+#include <Atom/RPI.Public/Pass/ParentPass.h>
+#include <Atom/RPI.Public/Pass/PassSystemInterface.h>
+#include <Atom/RPI.Public/RPIUtils.h>
+#include <Atom/RPI.Public/Scene.h>
+#include <Atom/RPI.Public/Shader/ShaderResourceGroup.h>
+#include <Atom/RPI.Public/View.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        FilmGrainSettings::FilmGrainSettings(PostProcessFeatureProcessor* featureProcessor)
+            : PostProcessBase(featureProcessor)
+        {
+        }
+
+        void FilmGrainSettings::OnConfigChanged()
+        {
+            m_parentSettings->OnConfigChanged();
+        }
+
+        AZ::Data::Instance<AZ::RPI::StreamingImage> FilmGrainSettings::LoadStreamingImage(
+            const char* textureFilePath, [[maybe_unused]] const char* sampleName)
+        {
+            using namespace AZ;
+
+            Data::AssetId streamingImageAssetId;
+            Data::AssetCatalogRequestBus::BroadcastResult(
+                streamingImageAssetId, &Data::AssetCatalogRequestBus::Events::GetAssetIdByPath, textureFilePath,
+                azrtti_typeid<RPI::StreamingImageAsset>(), false);
+            if (!streamingImageAssetId.IsValid())
+            {
+                AZ_Error(sampleName, false, "Failed to get streaming image asset id with path %s", textureFilePath);
+                return nullptr;
+            }
+
+            auto streamingImageAsset = Data::AssetManager::Instance().GetAsset<RPI::StreamingImageAsset>(
+                streamingImageAssetId, AZ::Data::AssetLoadBehavior::PreLoad);
+            streamingImageAsset.BlockUntilLoadComplete();
+
+            if (!streamingImageAsset.IsReady())
+            {
+                AZ_Error(sampleName, false, "Failed to get streaming image asset '%s'", textureFilePath);
+                return nullptr;
+            }
+
+            auto image = RPI::StreamingImage::FindOrCreate(streamingImageAsset);
+            if (!image)
+            {
+                AZ_Error(sampleName, false, "Failed to find or create an image instance from image asset '%s'", textureFilePath);
+                return nullptr;
+            }
+
+            return image;
+        }
+
+        void FilmGrainSettings::ApplySettingsTo(FilmGrainSettings* target, float alpha) const
+        {
+            AZ_Assert(target != nullptr, "FilmGrainSettings::ApplySettingsTo called with nullptr as argument.");
+
+            // Auto-gen code to blend individual params based on their override value onto target settings
+#define OVERRIDE_TARGET target
+#define OVERRIDE_ALPHA alpha
+#include <Atom/Feature/ParamMacros/StartOverrideBlend.inl>
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+#undef OVERRIDE_TARGET
+#undef OVERRIDE_ALPHA
+        }
+
+        void FilmGrainSettings::Simulate(float deltaTime)
+        {
+            m_deltaTime = deltaTime;
+        }
+
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/Source/PostProcess/FilmGrain/FilmGrainSettings.h b/Gems/Atom/Feature/Common/Code/Source/PostProcess/FilmGrain/FilmGrainSettings.h
new file mode 100644
index 0000000000..38e64050b6
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Source/PostProcess/FilmGrain/FilmGrainSettings.h
@@ -0,0 +1,73 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <AzCore/RTTI/ReflectContext.h>
+
+#include <Atom/RHI.Reflect/ShaderResourceGroupLayoutDescriptor.h>
+
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainSettingsInterface.h>
+#include <Atom/RPI.Public/Image/StreamingImage.h>
+#include <PostProcess/PostProcessBase.h>
+
+#include <Atom/RPI.Public/View.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        class PostProcessSettings;
+
+        class FilmGrainSettings final
+            : public FilmGrainSettingsInterface
+            , public PostProcessBase
+        {
+            friend class PostProcessSettings;
+            friend class PostProcessFeatureProcessor;
+
+        public:
+            AZ_RTTI(
+                AZ::Render::FilmGrainSettings,
+                "{E75BF1A1-2607-4743-A755-8CE2D59E291E}",
+                AZ::Render::FilmGrainSettingsInterface,
+                AZ::Render::PostProcessBase);
+            AZ_CLASS_ALLOCATOR(FilmGrainSettings, SystemAllocator, 0);
+
+            FilmGrainSettings(PostProcessFeatureProcessor* featureProcessor);
+            ~FilmGrainSettings() = default;
+
+            // BloomSettingsInterface overrides...
+            void OnConfigChanged() override;
+
+            // Applies settings from this onto target using override settings and passed alpha value for blending
+            void ApplySettingsTo(FilmGrainSettings* target, float alpha) const;
+
+            Data::Instance<RPI::StreamingImage> LoadStreamingImage(const char* textureFilePath, const char* sampleName);
+
+            // Generate getters and setters.
+#include <Atom/Feature/ParamMacros/StartParamFunctionsOverrideImpl.inl>
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+
+        private:
+            // Generate members...
+#include <Atom/Feature/ParamMacros/StartParamMembers.inl>
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+
+
+            void Simulate(float deltaTime);
+
+            PostProcessSettings* m_parentSettings = nullptr;
+
+            float m_deltaTime = 0.0f;
+        };
+
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/Source/PostProcess/PaniniProjection/PaniniProjectionSettings.cpp b/Gems/Atom/Feature/Common/Code/Source/PostProcess/PaniniProjection/PaniniProjectionSettings.cpp
new file mode 100644
index 0000000000..cabe7d2892
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Source/PostProcess/PaniniProjection/PaniniProjectionSettings.cpp
@@ -0,0 +1,58 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <PostProcess/PaniniProjection/PaniniProjectionSettings.h>
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionConstants.h>
+
+#include <PostProcess/PostProcessFeatureProcessor.h>
+
+#include <AzCore/Serialization/SerializeContext.h>
+
+#include <Atom/RPI.Public/Image/ImageSystemInterface.h>
+#include <Atom/RPI.Public/Pass/ParentPass.h>
+#include <Atom/RPI.Public/Pass/PassSystemInterface.h>
+#include <Atom/RPI.Public/RPIUtils.h>
+#include <Atom/RPI.Public/Scene.h>
+#include <Atom/RPI.Public/Shader/ShaderResourceGroup.h>
+#include <Atom/RPI.Public/View.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        PaniniProjectionSettings::PaniniProjectionSettings(PostProcessFeatureProcessor* featureProcessor)
+            : PostProcessBase(featureProcessor)
+        {
+        }
+
+        void PaniniProjectionSettings::OnConfigChanged()
+        {
+            m_parentSettings->OnConfigChanged();
+        }
+
+        void PaniniProjectionSettings::ApplySettingsTo(PaniniProjectionSettings* target, float alpha) const
+        {
+            AZ_Assert(target != nullptr, "PaniniProjectionSettings::ApplySettingsTo called with nullptr as argument.");
+
+            // Auto-gen code to blend individual params based on their override value onto target settings
+#define OVERRIDE_TARGET target
+#define OVERRIDE_ALPHA alpha
+#include <Atom/Feature/ParamMacros/StartOverrideBlend.inl>
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+#undef OVERRIDE_TARGET
+#undef OVERRIDE_ALPHA
+        }
+
+        void PaniniProjectionSettings::Simulate(float deltaTime)
+        {
+            m_deltaTime = deltaTime;
+        }
+
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/Source/PostProcess/PaniniProjection/PaniniProjectionSettings.h b/Gems/Atom/Feature/Common/Code/Source/PostProcess/PaniniProjection/PaniniProjectionSettings.h
new file mode 100644
index 0000000000..e4c956240c
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Source/PostProcess/PaniniProjection/PaniniProjectionSettings.h
@@ -0,0 +1,71 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <AzCore/RTTI/ReflectContext.h>
+
+#include <Atom/RHI.Reflect/ShaderResourceGroupLayoutDescriptor.h>
+
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionSettingsInterface.h>
+#include <Atom/RPI.Public/Image/StreamingImage.h>
+#include <PostProcess/PostProcessBase.h>
+
+#include <Atom/RPI.Public/View.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        class PostProcessSettings;
+
+        class PaniniProjectionSettings final
+            : public PaniniProjectionSettingsInterface
+            , public PostProcessBase
+        {
+            friend class PostProcessSettings;
+            friend class PostProcessFeatureProcessor;
+
+        public:
+            AZ_RTTI(
+                AZ::Render::PaniniProjectionSettings,
+                "{30D32346-39CE-49DF-9EEC-FEEC2090A45A}",
+                AZ::Render::PaniniProjectionSettingsInterface,
+                AZ::Render::PostProcessBase);
+            AZ_CLASS_ALLOCATOR(PaniniProjectionSettings, SystemAllocator, 0);
+
+            PaniniProjectionSettings(PostProcessFeatureProcessor* featureProcessor);
+            ~PaniniProjectionSettings() = default;
+
+            // BloomSettingsInterface overrides...
+            void OnConfigChanged() override;
+
+            // Applies settings from this onto target using override settings and passed alpha value for blending
+            void ApplySettingsTo(PaniniProjectionSettings* target, float alpha) const;
+
+            // Generate getters and setters.
+#include <Atom/Feature/ParamMacros/StartParamFunctionsOverrideImpl.inl>
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+
+        private:
+            // Generate members...
+#include <Atom/Feature/ParamMacros/StartParamMembers.inl>
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+
+
+            void Simulate(float deltaTime);
+
+            PostProcessSettings* m_parentSettings = nullptr;
+
+            float m_deltaTime = 0.0f;
+        };
+
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/Source/PostProcess/PostProcessSettings.h b/Gems/Atom/Feature/Common/Code/Source/PostProcess/PostProcessSettings.h
index 35e9db6533..95cc7259d2 100644
--- a/Gems/Atom/Feature/Common/Code/Source/PostProcess/PostProcessSettings.h
+++ b/Gems/Atom/Feature/Common/Code/Source/PostProcess/PostProcessSettings.h
@@ -19,6 +19,9 @@
 #include <PostProcess/LookModification/LookModificationSettings.h>
 #include <PostProcess/ColorGrading/HDRColorGradingSettings.h>
 #include <PostProcess/ChromaticAberration/ChromaticAberrationSettings.h>
+#include <PostProcess/PaniniProjection/PaniniProjectionSettings.h>
+#include <PostProcess/FilmGrain/FilmGrainSettings.h>
+#include <PostProcess/Vignette/VignetteSettings.h>
 #include <ScreenSpace/DeferredFogSettings.h>
 
 namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/Source/PostProcess/Vignette/VignetteSettings.cpp b/Gems/Atom/Feature/Common/Code/Source/PostProcess/Vignette/VignetteSettings.cpp
new file mode 100644
index 0000000000..0b789bb578
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Source/PostProcess/Vignette/VignetteSettings.cpp
@@ -0,0 +1,58 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <PostProcess/Vignette/VignetteSettings.h>
+#include <Atom/Feature/PostProcess/Vignette/VignetteConstants.h>
+
+#include <PostProcess/PostProcessFeatureProcessor.h>
+
+#include <AzCore/Serialization/SerializeContext.h>
+
+#include <Atom/RPI.Public/Image/ImageSystemInterface.h>
+#include <Atom/RPI.Public/Pass/ParentPass.h>
+#include <Atom/RPI.Public/Pass/PassSystemInterface.h>
+#include <Atom/RPI.Public/RPIUtils.h>
+#include <Atom/RPI.Public/Scene.h>
+#include <Atom/RPI.Public/Shader/ShaderResourceGroup.h>
+#include <Atom/RPI.Public/View.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        VignetteSettings::VignetteSettings(PostProcessFeatureProcessor* featureProcessor)
+            : PostProcessBase(featureProcessor)
+        {
+        }
+
+        void VignetteSettings::OnConfigChanged()
+        {
+            m_parentSettings->OnConfigChanged();
+        }
+
+        void VignetteSettings::ApplySettingsTo(VignetteSettings* target, float alpha) const
+        {
+            AZ_Assert(target != nullptr, "VignetteSettings::ApplySettingsTo called with nullptr as argument.");
+
+            // Auto-gen code to blend individual params based on their override value onto target settings
+#define OVERRIDE_TARGET target
+#define OVERRIDE_ALPHA alpha
+#include <Atom/Feature/ParamMacros/StartOverrideBlend.inl>
+#include <Atom/Feature/PostProcess/Vignette/VignetteParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+#undef OVERRIDE_TARGET
+#undef OVERRIDE_ALPHA
+        }
+
+        void VignetteSettings::Simulate(float deltaTime)
+        {
+            m_deltaTime = deltaTime;
+        }
+
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/Source/PostProcess/Vignette/VignetteSettings.h b/Gems/Atom/Feature/Common/Code/Source/PostProcess/Vignette/VignetteSettings.h
new file mode 100644
index 0000000000..b77ee61767
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Source/PostProcess/Vignette/VignetteSettings.h
@@ -0,0 +1,71 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <AzCore/RTTI/ReflectContext.h>
+
+#include <Atom/RHI.Reflect/ShaderResourceGroupLayoutDescriptor.h>
+
+#include <Atom/Feature/PostProcess/Vignette/VignetteSettingsInterface.h>
+#include <Atom/RPI.Public/Image/StreamingImage.h>
+#include <PostProcess/PostProcessBase.h>
+
+#include <Atom/RPI.Public/View.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        class PostProcessSettings;
+
+        class VignetteSettings final
+            : public VignetteSettingsInterface
+            , public PostProcessBase
+        {
+            friend class PostProcessSettings;
+            friend class PostProcessFeatureProcessor;
+
+        public:
+            AZ_RTTI(
+                AZ::Render::VignetteSettings,
+                "{5FE434E6-70BF-4064-AAA9-D63225A9E29C}",
+                AZ::Render::VignetteSettingsInterface,
+                AZ::Render::PostProcessBase);
+            AZ_CLASS_ALLOCATOR(VignetteSettings, SystemAllocator, 0);
+
+            VignetteSettings(PostProcessFeatureProcessor* featureProcessor);
+            ~VignetteSettings() = default;
+
+            // BloomSettingsInterface overrides...
+            void OnConfigChanged() override;
+
+            // Applies settings from this onto target using override settings and passed alpha value for blending
+            void ApplySettingsTo(VignetteSettings* target, float alpha) const;
+
+            // Generate getters and setters.
+#include <Atom/Feature/ParamMacros/StartParamFunctionsOverrideImpl.inl>
+#include <Atom/Feature/PostProcess/Vignette/VignetteParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+
+        private:
+            // Generate members...
+#include <Atom/Feature/ParamMacros/StartParamMembers.inl>
+#include <Atom/Feature/PostProcess/Vignette/VignetteParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+
+
+            void Simulate(float deltaTime);
+
+            PostProcessSettings* m_parentSettings = nullptr;
+
+            float m_deltaTime = 0.0f;
+        };
+
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/Source/PostProcessing/FilmGrainPass.cpp b/Gems/Atom/Feature/Common/Code/Source/PostProcessing/FilmGrainPass.cpp
new file mode 100644
index 0000000000..84131edaad
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Source/PostProcessing/FilmGrainPass.cpp
@@ -0,0 +1,117 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <PostProcessing/FilmGrainPass.h>
+#include <PostProcess/PostProcessFeatureProcessor.h>
+#include <Atom/RPI.Public/RenderPipeline.h>
+#include <Atom/RPI.Public/Scene.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        RPI::Ptr<FilmGrainPass> FilmGrainPass::Create(const RPI::PassDescriptor& descriptor)
+        {
+            RPI::Ptr<FilmGrainPass> pass = aznew FilmGrainPass(descriptor);
+            return AZStd::move(pass);
+        }
+
+        FilmGrainPass::FilmGrainPass(const RPI::PassDescriptor& descriptor)
+            : RPI::ComputePass(descriptor)
+        {
+        }
+
+        bool FilmGrainPass::IsEnabled() const
+        {
+            if (!ComputePass::IsEnabled())
+            {
+                return false;
+            }
+            const RPI::Scene* scene = GetScene();
+            if (!scene)
+            {
+                return false;
+            }
+            PostProcessFeatureProcessor* fp = scene->GetFeatureProcessor<PostProcessFeatureProcessor>();
+            const RPI::ViewPtr view = GetRenderPipeline()->GetDefaultView();
+            if (!fp)
+            {
+                return false;
+            }
+            PostProcessSettings* postProcessSettings = fp->GetLevelSettingsFromView(view);
+            if (!postProcessSettings)
+            {
+                return false;
+            }
+            const FilmGrainSettings* filmGrainSettings = postProcessSettings->GetFilmGrainSettings();
+            if (!filmGrainSettings)
+            {
+                return false;
+            }
+            return filmGrainSettings->GetEnabled();
+        }
+
+        void FilmGrainPass::FrameBeginInternal(FramePrepareParams params)
+        {
+            // Must match the struct in FilmGrain.azsl
+            struct Constants
+            {
+                AZStd::array<u32, 2> m_outputSize;
+                AZStd::array<u32, 2> m_grainTextureSize;
+                float m_intensity = FilmGrain::DefaultIntensity;
+                float m_luminanceDampening = FilmGrain::DefaultLuminanceDampening;
+                float m_tilingScale = FilmGrain::DefaultTilingScale;
+            } constants{};
+
+            RPI::Scene* scene = GetScene();
+            PostProcessFeatureProcessor* fp = scene->GetFeatureProcessor<PostProcessFeatureProcessor>();
+            if (fp)
+            {
+                RPI::ViewPtr view = scene->GetDefaultRenderPipeline()->GetDefaultView();
+                PostProcessSettings* postProcessSettings = fp->GetLevelSettingsFromView(view);
+                if (postProcessSettings)
+                {
+                    FilmGrainSettings* filmGrainSettings = postProcessSettings->GetFilmGrainSettings();
+                    if (filmGrainSettings)
+                    {
+                        constants.m_intensity = filmGrainSettings->GetIntensity();
+                        constants.m_luminanceDampening = filmGrainSettings->GetLuminanceDampening();
+                        constants.m_tilingScale = filmGrainSettings->GetTilingScale();
+
+                        AZStd::string settingsGrainPath = filmGrainSettings->GetGrainPath();
+                        if (m_currentGrainPath != settingsGrainPath)
+                        {
+                            m_currentGrainPath = settingsGrainPath;
+                            m_grainImage = filmGrainSettings->LoadStreamingImage(settingsGrainPath.c_str(), "FilmGrain");
+                        }
+                    }
+                }
+            }
+
+            m_shaderResourceGroup->SetImage(m_grainIndex, m_grainImage);
+
+            RHI::Size grainTextureSize = m_grainImage->GetDescriptor().m_size;
+
+            constants.m_grainTextureSize[0] = grainTextureSize.m_width;
+            constants.m_grainTextureSize[1] = grainTextureSize.m_height;
+            
+            AZ_Assert(GetOutputCount() > 0, "FilmGrainPass: No output bindings!");
+            RPI::PassAttachment* outputAttachment = GetOutputBinding(0).GetAttachment().get();
+
+            AZ_Assert(outputAttachment != nullptr, "FilmGrainPass: Output binding has no attachment!");
+            RHI::Size size = outputAttachment->m_descriptor.m_image.m_size;
+
+            constants.m_outputSize[0] = size.m_width;
+            constants.m_outputSize[1] = size.m_height;
+
+            m_shaderResourceGroup->SetConstant(m_constantsIndex, constants);
+
+            RPI::ComputePass::FrameBeginInternal(params);
+        }
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/Source/PostProcessing/FilmGrainPass.h b/Gems/Atom/Feature/Common/Code/Source/PostProcessing/FilmGrainPass.h
new file mode 100644
index 0000000000..de53abc8b9
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Source/PostProcessing/FilmGrainPass.h
@@ -0,0 +1,45 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+#pragma once
+
+#include <Atom/RPI.Public/Pass/ComputePass.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        class FilmGrainPass final : public RPI::ComputePass
+        {
+            AZ_RPI_PASS(FilmGrainPass);
+
+        public:
+            AZ_RTTI(FilmGrainPass, "{786F1310-1AA1-42EB-90BF-14DF4A60BA9C}", AZ::RPI::ComputePass);
+            AZ_CLASS_ALLOCATOR(FilmGrainPass, SystemAllocator, 0);
+
+            ~FilmGrainPass() = default;
+            static RPI::Ptr<FilmGrainPass> Create(const RPI::PassDescriptor& descriptor);
+
+            bool IsEnabled() const override;
+
+        protected:
+            // Behavior functions override...
+            void FrameBeginInternal(FramePrepareParams params) override;
+
+        private:
+            FilmGrainPass(const RPI::PassDescriptor& descriptor);
+
+
+            Data::Instance<RPI::Image> m_grainImage;
+
+            AZStd::string m_currentGrainPath = "";
+
+            RHI::ShaderInputNameIndex m_grainIndex = "m_grain";
+            AZ::RHI::ShaderInputNameIndex m_constantsIndex = "m_constants";
+        };
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/Source/PostProcessing/PaniniProjectionPass.cpp b/Gems/Atom/Feature/Common/Code/Source/PostProcessing/PaniniProjectionPass.cpp
new file mode 100644
index 0000000000..fcebb9b77d
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Source/PostProcessing/PaniniProjectionPass.cpp
@@ -0,0 +1,101 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <PostProcessing/PaniniProjectionPass.h>
+#include <PostProcess/PostProcessFeatureProcessor.h>
+#include <Atom/RPI.Public/RenderPipeline.h>
+#include <Atom/RPI.Public/Scene.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        RPI::Ptr<PaniniProjectionPass> PaniniProjectionPass::Create(const RPI::PassDescriptor& descriptor)
+        {
+            RPI::Ptr<PaniniProjectionPass> pass = aznew PaniniProjectionPass(descriptor);
+            return AZStd::move(pass);
+        }
+
+        PaniniProjectionPass::PaniniProjectionPass(const RPI::PassDescriptor& descriptor)
+            : RPI::ComputePass(descriptor)
+        {
+        }
+
+        bool PaniniProjectionPass::IsEnabled() const
+        {
+            if (!ComputePass::IsEnabled())
+            {
+                return false;
+            }
+            const RPI::Scene* scene = GetScene();
+            if (!scene)
+            {
+                return false;
+            }
+            PostProcessFeatureProcessor* fp = scene->GetFeatureProcessor<PostProcessFeatureProcessor>();
+            const RPI::ViewPtr view = GetRenderPipeline()->GetDefaultView();
+            if (!fp)
+            {
+                return false;
+            }
+            PostProcessSettings* postProcessSettings = fp->GetLevelSettingsFromView(view);
+            if (!postProcessSettings)
+            {
+                return false;
+            }
+            const PaniniProjectionSettings* PaniniProjectionSettings = postProcessSettings->GetPaniniProjectionSettings();
+            if (!PaniniProjectionSettings)
+            {
+                return false;
+            }
+            return PaniniProjectionSettings->GetEnabled();
+        }
+
+        void PaniniProjectionPass::FrameBeginInternal(FramePrepareParams params)
+        {
+            // Must match the struct in PaniniProjection.azsl
+            struct Constants
+            {
+                AZStd::array<u32, 2> m_outputSize;
+                AZStd::array<float, 2> m_outputCenter;
+                float m_depth = PaniniProjection::DefaultDepth;
+            } constants{};
+
+            RPI::Scene* scene = GetScene();
+            PostProcessFeatureProcessor* fp = scene->GetFeatureProcessor<PostProcessFeatureProcessor>();
+            if (fp)
+            {
+                RPI::ViewPtr view = scene->GetDefaultRenderPipeline()->GetDefaultView();
+                PostProcessSettings* postProcessSettings = fp->GetLevelSettingsFromView(view);
+                if (postProcessSettings)
+                {
+                    PaniniProjectionSettings* PaniniProjectionSettings = postProcessSettings->GetPaniniProjectionSettings();
+                    if (PaniniProjectionSettings)
+                    {
+                        constants.m_depth = PaniniProjectionSettings->GetDepth();
+                    }
+                }
+            }
+
+            AZ_Assert(GetOutputCount() > 0, "PaniniProjectionPass: No output bindings!");
+            RPI::PassAttachment* outputAttachment = GetOutputBinding(0).GetAttachment().get();
+
+            AZ_Assert(outputAttachment != nullptr, "PaniniProjectionPass: Output binding has no attachment!");
+            RHI::Size size = outputAttachment->m_descriptor.m_image.m_size;
+
+            constants.m_outputSize[0] = size.m_width;
+            constants.m_outputSize[1] = size.m_height;
+            constants.m_outputCenter[0] = (size.m_width - 1) * 0.5f;
+            constants.m_outputCenter[1] = (size.m_height -1) * 0.5f;
+
+            m_shaderResourceGroup->SetConstant(m_constantsIndex, constants);
+
+            RPI::ComputePass::FrameBeginInternal(params);
+        }
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/Source/PostProcessing/PaniniProjectionPass.h b/Gems/Atom/Feature/Common/Code/Source/PostProcessing/PaniniProjectionPass.h
new file mode 100644
index 0000000000..b3f2355f46
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Source/PostProcessing/PaniniProjectionPass.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+#pragma once
+
+#include <Atom/RPI.Public/Pass/ComputePass.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        class PaniniProjectionPass final : public RPI::ComputePass
+        {
+            AZ_RPI_PASS(PaniniProjectionPass);
+
+        public:
+            AZ_RTTI(PaniniProjectionPass, "{DBFE786B-16DE-4F44-8188-E4E753270485}", AZ::RPI::ComputePass);
+            AZ_CLASS_ALLOCATOR(PaniniProjectionPass, SystemAllocator, 0);
+
+            ~PaniniProjectionPass() = default;
+            static RPI::Ptr<PaniniProjectionPass> Create(const RPI::PassDescriptor& descriptor);
+
+            bool IsEnabled() const override;
+
+        protected:
+            // Behavior functions override...
+            void FrameBeginInternal(FramePrepareParams params) override;
+
+        private:
+            PaniniProjectionPass(const RPI::PassDescriptor& descriptor);
+
+            AZ::RHI::ShaderInputNameIndex m_constantsIndex = "m_constants";
+        };
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/Source/PostProcessing/VignettePass.cpp b/Gems/Atom/Feature/Common/Code/Source/PostProcessing/VignettePass.cpp
new file mode 100644
index 0000000000..4f2733c4d3
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Source/PostProcessing/VignettePass.cpp
@@ -0,0 +1,101 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <PostProcessing/VignettePass.h>
+#include <PostProcess/PostProcessFeatureProcessor.h>
+#include <Atom/RPI.Public/RenderPipeline.h>
+#include <Atom/RPI.Public/Scene.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        RPI::Ptr<VignettePass> VignettePass::Create(const RPI::PassDescriptor& descriptor)
+        {
+            RPI::Ptr<VignettePass> pass = aznew VignettePass(descriptor);
+            return AZStd::move(pass);
+        }
+
+        VignettePass::VignettePass(const RPI::PassDescriptor& descriptor)
+            : RPI::ComputePass(descriptor)
+        {
+        }
+
+        bool VignettePass::IsEnabled() const
+        {
+            if (!ComputePass::IsEnabled())
+            {
+                return false;
+            }
+            const RPI::Scene* scene = GetScene();
+            if (!scene)
+            {
+                return false;
+            }
+            PostProcessFeatureProcessor* fp = scene->GetFeatureProcessor<PostProcessFeatureProcessor>();
+            const RPI::ViewPtr view = GetRenderPipeline()->GetDefaultView();
+            if (!fp)
+            {
+                return false;
+            }
+            PostProcessSettings* postProcessSettings = fp->GetLevelSettingsFromView(view);
+            if (!postProcessSettings)
+            {
+                return false;
+            }
+            const VignetteSettings* VignetteSettings = postProcessSettings->GetVignetteSettings();
+            if (!VignetteSettings)
+            {
+                return false;
+            }
+            return VignetteSettings->GetEnabled();
+        }
+
+        void VignettePass::FrameBeginInternal(FramePrepareParams params)
+        {
+            // Must match the struct in Vignette.azsl
+            struct Constants
+            {
+                AZStd::array<u32, 2> m_outputSize;
+                AZStd::array<float, 2> m_outputCenter;
+                float m_strength = Vignette::DefaultIntensity;
+            } constants{};
+
+            RPI::Scene* scene = GetScene();
+            PostProcessFeatureProcessor* fp = scene->GetFeatureProcessor<PostProcessFeatureProcessor>();
+            if (fp)
+            {
+                RPI::ViewPtr view = scene->GetDefaultRenderPipeline()->GetDefaultView();
+                PostProcessSettings* postProcessSettings = fp->GetLevelSettingsFromView(view);
+                if (postProcessSettings)
+                {
+                    VignetteSettings* VignetteSettings = postProcessSettings->GetVignetteSettings();
+                    if (VignetteSettings)
+                    {
+                        constants.m_strength = VignetteSettings->GetIntensity();
+                    }
+                }
+            }
+
+            AZ_Assert(GetOutputCount() > 0, "VignettePass: No output bindings!");
+            RPI::PassAttachment* outputAttachment = GetOutputBinding(0).GetAttachment().get();
+
+            AZ_Assert(outputAttachment != nullptr, "VignettePass: Output binding has no attachment!");
+            RHI::Size size = outputAttachment->m_descriptor.m_image.m_size;
+
+            constants.m_outputSize[0] = size.m_width;
+            constants.m_outputSize[1] = size.m_height;
+            constants.m_outputCenter[0] = (size.m_width - 1) * 0.5f;
+            constants.m_outputCenter[1] = (size.m_height -1) * 0.5f;
+
+            m_shaderResourceGroup->SetConstant(m_constantsIndex, constants);
+
+            RPI::ComputePass::FrameBeginInternal(params);
+        }
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/Source/PostProcessing/VignettePass.h b/Gems/Atom/Feature/Common/Code/Source/PostProcessing/VignettePass.h
new file mode 100644
index 0000000000..0cb1c1592a
--- /dev/null
+++ b/Gems/Atom/Feature/Common/Code/Source/PostProcessing/VignettePass.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+#pragma once
+
+#include <Atom/RPI.Public/Pass/ComputePass.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        class VignettePass final : public RPI::ComputePass
+        {
+            AZ_RPI_PASS(VignettePass);
+
+        public:
+            AZ_RTTI(VignettePass, "{69228453-67F9-473D-ACD6-FA712A23FD23}", AZ::RPI::ComputePass);
+            AZ_CLASS_ALLOCATOR(VignettePass, SystemAllocator, 0);
+
+            ~VignettePass() = default;
+            static RPI::Ptr<VignettePass> Create(const RPI::PassDescriptor& descriptor);
+
+            bool IsEnabled() const override;
+
+        protected:
+            // Behavior functions override...
+            void FrameBeginInternal(FramePrepareParams params) override;
+
+        private:
+            VignettePass(const RPI::PassDescriptor& descriptor);
+
+            AZ::RHI::ShaderInputNameIndex m_constantsIndex = "m_constants";
+        };
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/Atom/Feature/Common/Code/atom_feature_common_files.cmake b/Gems/Atom/Feature/Common/Code/atom_feature_common_files.cmake
index e4940c8f7a..0d9931f940 100644
--- a/Gems/Atom/Feature/Common/Code/atom_feature_common_files.cmake
+++ b/Gems/Atom/Feature/Common/Code/atom_feature_common_files.cmake
@@ -186,8 +186,14 @@ set(FILES
     Source/PostProcess/DepthOfField/DepthOfFieldSettings.h
     Source/PostProcess/ExposureControl/ExposureControlSettings.cpp
     Source/PostProcess/ExposureControl/ExposureControlSettings.h
+    Source/PostProcess/FilmGrain/FilmGrainSettings.cpp
+    Source/PostProcess/FilmGrain/FilmGrainSettings.h
+    Source/PostProcess/PaniniProjection/PaniniProjectionSettings.cpp
+    Source/PostProcess/PaniniProjection/PaniniProjectionSettings.h
     Source/PostProcess/Ssao/SsaoSettings.cpp
     Source/PostProcess/Ssao/SsaoSettings.h
+    Source/PostProcess/Vignette/VignetteSettings.cpp
+    Source/PostProcess/Vignette/VignetteSettings.h
     Source/PostProcess/LookModification/LookModificationSettings.cpp
     Source/PostProcess/LookModification/LookModificationSettings.h
     Source/PostProcessing/BlendColorGradingLutsPass.h
@@ -204,6 +210,12 @@ set(FILES
     Source/PostProcessing/BloomParentPass.cpp
     Source/PostProcessing/ChromaticAberrationPass.h
     Source/PostProcessing/ChromaticAberrationPass.cpp
+    Source/PostProcessing/FilmGrainPass.h
+    Source/PostProcessing/FilmGrainPass.cpp
+    Source/PostProcessing/PaniniProjectionPass.h
+    Source/PostProcessing/PaniniProjectionPass.cpp
+    Source/PostProcessing/VignettePass.h
+    Source/PostProcessing/VignettePass.cpp
     Source/PostProcessing/DepthOfFieldCompositePass.h
     Source/PostProcessing/DepthOfFieldCompositePass.cpp
     Source/PostProcessing/DepthOfFieldBokehBlurPass.h
diff --git a/Gems/Atom/Feature/Common/Code/atom_feature_common_public_files.cmake b/Gems/Atom/Feature/Common/Code/atom_feature_common_public_files.cmake
index f4f05fa0a7..bdebbb7eb9 100644
--- a/Gems/Atom/Feature/Common/Code/atom_feature_common_public_files.cmake
+++ b/Gems/Atom/Feature/Common/Code/atom_feature_common_public_files.cmake
@@ -57,6 +57,15 @@ set(FILES
     Include/Atom/Feature/PostProcess/ChromaticAberration/ChromaticAberrationConstants.h
     Include/Atom/Feature/PostProcess/ChromaticAberration/ChromaticAberrationParams.inl
     Include/Atom/Feature/PostProcess/ChromaticAberration/ChromaticAberrationSettingsInterface.h
+    Include/Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionConstants.h
+    Include/Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionParams.inl
+    Include/Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionSettingsInterface.h
+    Include/Atom/Feature/PostProcess/FilmGrain/FilmGrainConstants.h
+    Include/Atom/Feature/PostProcess/FilmGrain/FilmGrainParams.inl
+    Include/Atom/Feature/PostProcess/FilmGrain/FilmGrainSettingsInterface.h
+    Include/Atom/Feature/PostProcess/Vignette/VignetteConstants.h
+    Include/Atom/Feature/PostProcess/Vignette/VignetteParams.inl
+    Include/Atom/Feature/PostProcess/Vignette/VignetteSettingsInterface.h
     Include/Atom/Feature/PostProcess/ColorGrading/HDRColorGradingParams.inl
     Include/Atom/Feature/PostProcess/ColorGrading/HDRColorGradingSettingsInterface.h
     Include/Atom/Feature/PostProcess/DepthOfField/DepthOfFieldConstants.h
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Assets/Editor/Scripts/LegacyContentConversion/LegacyComponentConverter.py b/Gems/AtomLyIntegration/CommonFeatures/Assets/Editor/Scripts/LegacyContentConversion/LegacyComponentConverter.py
index c74aceaed6..5109f7fce5 100644
--- a/Gems/AtomLyIntegration/CommonFeatures/Assets/Editor/Scripts/LegacyContentConversion/LegacyComponentConverter.py
+++ b/Gems/AtomLyIntegration/CommonFeatures/Assets/Editor/Scripts/LegacyContentConversion/LegacyComponentConverter.py
@@ -40,11 +40,7 @@ How do I run this script from a command line?
 1) Check out any .slice, .layer, .ly, and .cry files you want to convert from source control
     - This script will remove the legacy components entirely, so make sure you have your files
       backed up before you run this script in case you want to run it again
-<<<<<<< HEAD
-2) From the dev folder, run LegacyComponentConverter.py project=<ProjectName> --include_gems
-=======
 2) From the Lumberyard root folder, run LegacyComponentConverter.py project=<ProjectName> --include_gems
->>>>>>> main
     - --include_gems is optional
     - if you include Gems, it will run all all Gems, not just the ones enabled by your project
 
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Include/AtomLyIntegration/CommonFeatures/PostProcess/FilmGrain/FilmGrainBus.h b/Gems/AtomLyIntegration/CommonFeatures/Code/Include/AtomLyIntegration/CommonFeatures/PostProcess/FilmGrain/FilmGrainBus.h
new file mode 100644
index 0000000000..8e81a3ec03
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Include/AtomLyIntegration/CommonFeatures/PostProcess/FilmGrain/FilmGrainBus.h
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainConstants.h>
+#include <AzCore/Component/Component.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        class FilmGrainRequests : public ComponentBus
+        {
+        public:
+            AZ_RTTI(AZ::Render::FilmGrainRequests, "{8072BEF6-22A2-45F0-A887-0CB840B6EE45}");
+
+            /// Overrides the default AZ::EBusTraits handler policy to allow one listener only.
+            static const EBusHandlerPolicy HandlerPolicy = EBusHandlerPolicy::Single;
+            virtual ~FilmGrainRequests()
+            {
+            }
+
+            // Auto-gen virtual getters/setters...
+#include <Atom/Feature/ParamMacros/StartParamFunctionsVirtual.inl>
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+        };
+
+        typedef AZ::EBus<FilmGrainRequests> FilmGrainRequestBus;
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Include/AtomLyIntegration/CommonFeatures/PostProcess/FilmGrain/FilmGrainComponentConfig.h b/Gems/AtomLyIntegration/CommonFeatures/Code/Include/AtomLyIntegration/CommonFeatures/PostProcess/FilmGrain/FilmGrainComponentConfig.h
new file mode 100644
index 0000000000..1a5e7d77fc
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Include/AtomLyIntegration/CommonFeatures/PostProcess/FilmGrain/FilmGrainComponentConfig.h
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainSettingsInterface.h>
+#include <AzCore/Component/Component.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        class FilmGrainComponentConfig final : public ComponentConfig
+        {
+        public:
+            AZ_RTTI(AZ::Render::FilmGrainComponentConfig, "{1BE23078-EBC5-4872-B3AB-30AB42BC6C58}", AZ::ComponentConfig);
+
+            static void Reflect(ReflectContext* context);
+
+            // Generate members...
+#include <Atom/Feature/ParamMacros/StartParamMembers.inl>
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+
+            // Generate Getters/Setters...
+#include <Atom/Feature/ParamMacros/StartParamFunctions.inl>
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+
+            void CopySettingsFrom(FilmGrainSettingsInterface* settings);
+            void CopySettingsTo(FilmGrainSettingsInterface* settings);
+
+            bool ArePropertiesReadOnly() const
+            {
+                return !m_enabled;
+            }
+        };
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Include/AtomLyIntegration/CommonFeatures/PostProcess/PaniniProjection/PaniniProjectionBus.h b/Gems/AtomLyIntegration/CommonFeatures/Code/Include/AtomLyIntegration/CommonFeatures/PostProcess/PaniniProjection/PaniniProjectionBus.h
new file mode 100644
index 0000000000..5eb3f6f706
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Include/AtomLyIntegration/CommonFeatures/PostProcess/PaniniProjection/PaniniProjectionBus.h
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionConstants.h>
+#include <AzCore/Component/Component.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        class PaniniProjectionRequests : public ComponentBus
+        {
+        public:
+            AZ_RTTI(AZ::Render::PaniniProjectionRequests, "{CA87A719-1724-47E4-82F3-EB99A7C45DDA}");
+
+            /// Overrides the default AZ::EBusTraits handler policy to allow one listener only.
+            static const EBusHandlerPolicy HandlerPolicy = EBusHandlerPolicy::Single;
+            virtual ~PaniniProjectionRequests()
+            {
+            }
+
+            // Auto-gen virtual getters/setters...
+#include <Atom/Feature/ParamMacros/StartParamFunctionsVirtual.inl>
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+        };
+
+        typedef AZ::EBus<PaniniProjectionRequests> PaniniProjectionRequestBus;
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Include/AtomLyIntegration/CommonFeatures/PostProcess/PaniniProjection/PaniniProjectionComponentConfig.h b/Gems/AtomLyIntegration/CommonFeatures/Code/Include/AtomLyIntegration/CommonFeatures/PostProcess/PaniniProjection/PaniniProjectionComponentConfig.h
new file mode 100644
index 0000000000..eaa2af8c96
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Include/AtomLyIntegration/CommonFeatures/PostProcess/PaniniProjection/PaniniProjectionComponentConfig.h
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionSettingsInterface.h>
+#include <AzCore/Component/Component.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        class PaniniProjectionComponentConfig final : public ComponentConfig
+        {
+        public:
+            AZ_RTTI(AZ::Render::PaniniProjectionComponentConfig, "{AB9BE317-2A16-4737-9BB9-E39C0EF0F444}", AZ::ComponentConfig);
+
+            static void Reflect(ReflectContext* context);
+
+            // Generate members...
+#include <Atom/Feature/ParamMacros/StartParamMembers.inl>
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+
+            // Generate Getters/Setters...
+#include <Atom/Feature/ParamMacros/StartParamFunctions.inl>
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+
+            void CopySettingsFrom(PaniniProjectionSettingsInterface* settings);
+            void CopySettingsTo(PaniniProjectionSettingsInterface* settings);
+
+            bool ArePropertiesReadOnly() const
+            {
+                return !m_enabled;
+            }
+        };
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Include/AtomLyIntegration/CommonFeatures/PostProcess/Vignette/VignetteBus.h b/Gems/AtomLyIntegration/CommonFeatures/Code/Include/AtomLyIntegration/CommonFeatures/PostProcess/Vignette/VignetteBus.h
new file mode 100644
index 0000000000..a06d93b400
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Include/AtomLyIntegration/CommonFeatures/PostProcess/Vignette/VignetteBus.h
@@ -0,0 +1,37 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <Atom/Feature/PostProcess/Vignette/VignetteConstants.h>
+#include <AzCore/Component/Component.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        class VignetteRequests : public ComponentBus
+        {
+        public:
+            AZ_RTTI(AZ::Render::VignetteRequests, "{F4DE4346-1919-4D8F-BE05-EA040906C12C}");
+
+            /// Overrides the default AZ::EBusTraits handler policy to allow one listener only.
+            static const EBusHandlerPolicy HandlerPolicy = EBusHandlerPolicy::Single;
+            virtual ~VignetteRequests()
+            {
+            }
+
+            // Auto-gen virtual getters/setters...
+#include <Atom/Feature/ParamMacros/StartParamFunctionsVirtual.inl>
+#include <Atom/Feature/PostProcess/Vignette/VignetteParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+        };
+
+        typedef AZ::EBus<VignetteRequests> VignetteRequestBus;
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Include/AtomLyIntegration/CommonFeatures/PostProcess/Vignette/VignetteComponentConfig.h b/Gems/AtomLyIntegration/CommonFeatures/Code/Include/AtomLyIntegration/CommonFeatures/PostProcess/Vignette/VignetteComponentConfig.h
new file mode 100644
index 0000000000..75d7c34284
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Include/AtomLyIntegration/CommonFeatures/PostProcess/Vignette/VignetteComponentConfig.h
@@ -0,0 +1,44 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <Atom/Feature/PostProcess/Vignette/VignetteSettingsInterface.h>
+#include <AzCore/Component/Component.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        class VignetteComponentConfig final : public ComponentConfig
+        {
+        public:
+            AZ_RTTI(AZ::Render::VignetteComponentConfig, "{2CB8446B-1410-4885-A3DE-11BB0590D91A}", AZ::ComponentConfig);
+
+            static void Reflect(ReflectContext* context);
+
+            // Generate members...
+#include <Atom/Feature/ParamMacros/StartParamMembers.inl>
+#include <Atom/Feature/PostProcess/Vignette/VignetteParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+
+            // Generate Getters/Setters...
+#include <Atom/Feature/ParamMacros/StartParamFunctions.inl>
+#include <Atom/Feature/PostProcess/Vignette/VignetteParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+
+            void CopySettingsFrom(VignetteSettingsInterface* settings);
+            void CopySettingsTo(VignetteSettingsInterface* settings);
+
+            bool ArePropertiesReadOnly() const
+            {
+                return !m_enabled;
+            }
+        };
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/Module.cpp b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/Module.cpp
index 2f6355993d..0e2afa623a 100644
--- a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/Module.cpp
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/Module.cpp
@@ -34,6 +34,9 @@
 #include <PostProcess/ShapeWeightModifier/ShapeWeightModifierComponent.h>
 #include <PostProcess/GradientWeightModifier/GradientWeightModifierComponent.h>
 #include <PostProcess/ChromaticAberration/ChromaticAberrationComponent.h>
+#include <PostProcess/PaniniProjection/PaniniProjectionComponent.h>
+#include <PostProcess/FilmGrain/FilmGrainComponent.h>
+#include <PostProcess/Vignette/VignetteComponent.h>
 #include <ScreenSpace/DeferredFogComponent.h>
 #include <SkyAtmosphere/SkyAtmosphereComponent.h>
 #include <SkyBox/HDRiSkyboxComponent.h>
@@ -70,6 +73,9 @@
 #include <PostProcess/ShapeWeightModifier/EditorShapeWeightModifierComponent.h>
 #include <PostProcess/GradientWeightModifier/EditorGradientWeightModifierComponent.h>
 #include <PostProcess/ChromaticAberration/EditorChromaticAberrationComponent.h>
+#include <PostProcess/PaniniProjection/EditorPaniniProjectionComponent.h>
+#include <PostProcess/FilmGrain/EditorFilmGrainComponent.h>
+#include <PostProcess/Vignette/EditorVignetteComponent.h>
 #include <ScreenSpace/EditorDeferredFogComponent.h>
 #include <SkyAtmosphere/EditorSkyAtmosphereComponent.h>
 #include <SkyBox/EditorHDRiSkyboxComponent.h>
@@ -124,6 +130,9 @@ namespace AZ
                         AttachmentComponent::CreateDescriptor(),
                         OcclusionCullingPlaneComponent::CreateDescriptor(),
                         ChromaticAberrationComponent::CreateDescriptor(),
+                        PaniniProjectionComponent::CreateDescriptor(),
+                        FilmGrainComponent::CreateDescriptor(),
+                        VignetteComponent::CreateDescriptor(),
                         CubeMapCaptureComponent::CreateDescriptor(),
 
 #ifdef ATOMLYINTEGRATION_FEATURE_COMMON_EDITOR
@@ -160,6 +169,9 @@ namespace AZ
                         EditorAttachmentComponent::CreateDescriptor(),
                         EditorOcclusionCullingPlaneComponent::CreateDescriptor(),
                         EditorChromaticAberrationComponent::CreateDescriptor(),
+                        EditorPaniniProjectionComponent::CreateDescriptor(),
+                        EditorFilmGrainComponent::CreateDescriptor(),
+                        EditorVignetteComponent::CreateDescriptor(),
                         EditorCubeMapCaptureComponent::CreateDescriptor(),
 #endif
                     });
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/EditorFilmGrainComponent.cpp b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/EditorFilmGrainComponent.cpp
new file mode 100644
index 0000000000..ec516ebed9
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/EditorFilmGrainComponent.cpp
@@ -0,0 +1,109 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <PostProcess/FilmGrain/EditorFilmGrainComponent.h>
+#include <AzCore/RTTI/BehaviorContext.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        void EditorFilmGrainComponent::Reflect(AZ::ReflectContext* context)
+        {
+            BaseClass::Reflect(context);
+
+            if (AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(context))
+            {
+                serializeContext->Class<EditorFilmGrainComponent, BaseClass>()->Version(0);
+
+                if (AZ::EditContext* editContext = serializeContext->GetEditContext())
+                {
+                    editContext->Class<EditorFilmGrainComponent>("Film Grain", "Controls the Film Grain")
+                        ->ClassElement(Edit::ClassElements::EditorData, "")
+                        ->Attribute(Edit::Attributes::Category, "Atom")
+                        ->Attribute(
+                            AZ::Edit::Attributes::Icon, "Icons/Components/Component_Placeholder.svg") // [GFX TODO ATOM-2672][PostFX] need to create icons for PostProcessing.
+                        ->Attribute(
+                            AZ::Edit::Attributes::ViewportIcon,
+                            "Icons/Components/Viewport/Component_Placeholder.svg") // [GFX TODO ATOM-2672][PostFX] need to create icons for PostProcessing.
+                        ->Attribute(Edit::Attributes::AppearsInAddComponentMenu, AZ_CRC("Game", 0x232b318c))
+                        ->Attribute(Edit::Attributes::AutoExpand, true)
+                        ->Attribute(
+                            Edit::Attributes::HelpPageURL,
+                            "https://o3de.org/docs/user-guide/components/reference/atom/FilmGrain/") // [TODO ATOM-2672][PostFX] need create page for PostProcessing.
+                        ;
+
+                    editContext->Class<FilmGrainComponentController>("FilmGrainComponentController", "")
+                        ->ClassElement(AZ::Edit::ClassElements::EditorData, "")
+                        ->Attribute(AZ::Edit::Attributes::AutoExpand, true)
+                        ->DataElement(AZ::Edit::UIHandlers::Default, &FilmGrainComponentController::m_configuration, "Configuration", "")
+                        ->Attribute(AZ::Edit::Attributes::Visibility, AZ::Edit::PropertyVisibility::ShowChildrenOnly);
+
+                    editContext->Class<FilmGrainComponentConfig>("FilmGrainComponentConfig", "")
+                        ->DataElement(
+                            Edit::UIHandlers::CheckBox, &FilmGrainComponentConfig::m_enabled, "Enable Film Grain", "Enable Film Grain.")
+                        ->Attribute(Edit::Attributes::ChangeNotify, Edit::PropertyRefreshLevels::ValuesOnly)
+
+                        ->DataElement(AZ::Edit::UIHandlers::Slider, &FilmGrainComponentConfig::m_intensity, "Intensity", "Intensity of effect")
+                        ->Attribute(AZ::Edit::Attributes::Min, 0.0f)
+                        ->Attribute(AZ::Edit::Attributes::Max, 1.0f)
+                        ->Attribute(AZ::Edit::Attributes::ChangeNotify, Edit::PropertyRefreshLevels::ValuesOnly)
+                        ->Attribute(Edit::Attributes::ReadOnly, &FilmGrainComponentConfig::ArePropertiesReadOnly)
+
+                        ->DataElement(
+                            AZ::Edit::UIHandlers::Slider, &FilmGrainComponentConfig::m_luminanceDampening, "Luminance Dampening", "Factor for dampening effect in areas of both high and low luminance")
+                        ->Attribute(AZ::Edit::Attributes::Min, 0.0f)
+                        ->Attribute(AZ::Edit::Attributes::Max, 1.0f)
+                        ->Attribute(AZ::Edit::Attributes::ChangeNotify, Edit::PropertyRefreshLevels::ValuesOnly)
+                        ->Attribute(Edit::Attributes::ReadOnly, &FilmGrainComponentConfig::ArePropertiesReadOnly)
+
+                        ->DataElement(
+                            AZ::Edit::UIHandlers::Slider, &FilmGrainComponentConfig::m_tilingScale, "Tiling Scale",
+                            "Factor for tiling the pregenerated noise")
+                        ->Attribute(AZ::Edit::Attributes::Min, 0.0f)
+                        ->Attribute(AZ::Edit::Attributes::Max, 20.0f)
+                        ->Attribute(AZ::Edit::Attributes::ChangeNotify, Edit::PropertyRefreshLevels::ValuesOnly)
+                        ->Attribute(Edit::Attributes::ReadOnly, &FilmGrainComponentConfig::ArePropertiesReadOnly)
+
+                        // Overrides
+                        ->ClassElement(AZ::Edit::ClassElements::Group, "Overrides")
+                        ->Attribute(AZ::Edit::Attributes::AutoExpand, false)
+
+                    // Auto-gen editor context settings for overrides
+#define EDITOR_CLASS FilmGrainComponentConfig
+#include <Atom/Feature/ParamMacros/StartOverrideEditorContext.inl>
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+#undef EDITOR_CLASS
+                        ;
+                }
+            }
+
+            if (auto behaviorContext = azrtti_cast<BehaviorContext*>(context))
+            {
+                behaviorContext->Class<EditorFilmGrainComponent>()->RequestBus("FilmGrainRequestBus");
+
+                behaviorContext
+                    ->ConstantProperty("EditorFilmGrainComponentTypeId", BehaviorConstant(Uuid(FilmGrain::EditorFilmGrainComponentTypeId)))
+                    ->Attribute(AZ::Script::Attributes::Module, "render")
+                    ->Attribute(AZ::Script::Attributes::Scope, AZ::Script::Attributes::ScopeFlags::Automation);
+            }
+        }
+
+        EditorFilmGrainComponent::EditorFilmGrainComponent(const FilmGrainComponentConfig& config)
+            : BaseClass(config)
+        {
+        }
+
+        u32 EditorFilmGrainComponent::OnConfigurationChanged()
+        {
+            m_controller.OnConfigChanged();
+            return Edit::PropertyRefreshLevels::AttributesAndValues;
+        }
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/EditorFilmGrainComponent.h b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/EditorFilmGrainComponent.h
new file mode 100644
index 0000000000..101f687d64
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/EditorFilmGrainComponent.h
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <Atom/Feature/PostProcess/DepthOfField/DepthOfFieldConstants.h>
+#include <AzToolsFramework/ToolsComponents/EditorComponentAdapter.h>
+#include <PostProcess/FilmGrain/FilmGrainComponent.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        namespace FilmGrain
+        {
+            static constexpr const char* const EditorFilmGrainComponentTypeId = "{61D39B81-DE19-482B-97FF-3761F2C25E4D}";
+        }
+
+        class EditorFilmGrainComponent final
+            : public AzToolsFramework::Components::
+                  EditorComponentAdapter<FilmGrainComponentController, FilmGrainComponent, FilmGrainComponentConfig>
+        {
+        public:
+            using BaseClass = AzToolsFramework::Components::
+                EditorComponentAdapter<FilmGrainComponentController, FilmGrainComponent, FilmGrainComponentConfig>;
+            AZ_EDITOR_COMPONENT(AZ::Render::EditorFilmGrainComponent, FilmGrain::EditorFilmGrainComponentTypeId, BaseClass);
+
+            static void Reflect(AZ::ReflectContext* context);
+
+            EditorFilmGrainComponent() = default;
+            EditorFilmGrainComponent(const FilmGrainComponentConfig& config);
+
+            //! EditorRenderComponentAdapter overrides...
+            AZ::u32 OnConfigurationChanged() override;
+        };
+
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/FilmGrainComponent.cpp b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/FilmGrainComponent.cpp
new file mode 100644
index 0000000000..24aa6e6bee
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/FilmGrainComponent.cpp
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <AzCore/RTTI/BehaviorContext.h>
+#include <PostProcess/FilmGrain/FilmGrainComponent.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        FilmGrainComponent::FilmGrainComponent(const FilmGrainComponentConfig& config)
+            : BaseClass(config)
+        {
+        }
+
+        void FilmGrainComponent::Reflect(AZ::ReflectContext* context)
+        {
+            BaseClass::Reflect(context);
+
+            if (auto serializeContext = azrtti_cast<AZ::SerializeContext*>(context))
+            {
+                serializeContext->Class<FilmGrainComponent, BaseClass>();
+            }
+
+            if (auto behaviorContext = azrtti_cast<BehaviorContext*>(context))
+            {
+                behaviorContext->Class<FilmGrainComponent>()->RequestBus("FilmGrainRequestBus");
+
+                behaviorContext->ConstantProperty("FilmGrainComponentTypeId", BehaviorConstant(Uuid(FilmGrain::FilmGrainComponentTypeId)))
+                    ->Attribute(AZ::Script::Attributes::Module, "render")
+                    ->Attribute(AZ::Script::Attributes::Scope, AZ::Script::Attributes::ScopeFlags::Common);
+            }
+        }
+
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/FilmGrainComponent.h b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/FilmGrainComponent.h
new file mode 100644
index 0000000000..0b18386b0e
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/FilmGrainComponent.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainConstants.h>
+#include <PostProcess/FilmGrain/FilmGrainComponentController.h>
+#include <AtomLyIntegration/CommonFeatures/PostProcess/FilmGrain/FilmGrainComponentConfig.h>
+#include <AzCore/Component/Component.h>
+#include <AzFramework/Components/ComponentAdapter.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        namespace FilmGrain
+        {
+            static constexpr const char* const FilmGrainComponentTypeId = "{E2F5CF7E-3D25-41E4-B3BF-C8669494F7B4}";
+        }
+
+        class FilmGrainComponent final
+            : public AzFramework::Components::ComponentAdapter<FilmGrainComponentController, FilmGrainComponentConfig>
+        {
+        public:
+            using BaseClass = AzFramework::Components::ComponentAdapter<FilmGrainComponentController, FilmGrainComponentConfig>;
+            AZ_COMPONENT(AZ::Render::FilmGrainComponent, FilmGrain::FilmGrainComponentTypeId, BaseClass);
+
+            FilmGrainComponent() = default;
+            FilmGrainComponent(const FilmGrainComponentConfig& config);
+
+            static void Reflect(AZ::ReflectContext* context);
+        };
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/FilmGrainComponentConfig.cpp b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/FilmGrainComponentConfig.cpp
new file mode 100644
index 0000000000..fe8d653e9a
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/FilmGrainComponentConfig.cpp
@@ -0,0 +1,62 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <AtomLyIntegration/CommonFeatures/PostProcess/FilmGrain/FilmGrainComponentConfig.h>
+#include <AzCore/Serialization/EditContext.h>
+#include <AzCore/Serialization/SerializeContext.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        void FilmGrainComponentConfig::Reflect(ReflectContext* context)
+        {
+            if (auto serializeContext = azrtti_cast<AZ::SerializeContext*>(context))
+            {
+                serializeContext->Class<FilmGrainComponentConfig, ComponentConfig>()->Version(0)
+
+                // Auto-gen serialize context code...
+#define SERIALIZE_CLASS FilmGrainComponentConfig
+#include <Atom/Feature/ParamMacros/StartParamSerializeContext.inl>
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+#undef SERIALIZE_CLASS
+                    ;
+            }
+        }
+
+        void FilmGrainComponentConfig::CopySettingsFrom(FilmGrainSettingsInterface* settings)
+        {
+            if (!settings)
+            {
+                return;
+            }
+
+#define COPY_SOURCE settings
+#include <Atom/Feature/ParamMacros/StartParamCopySettingsFrom.inl>
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+#undef COPY_SOURCE
+        }
+
+        void FilmGrainComponentConfig::CopySettingsTo(FilmGrainSettingsInterface* settings)
+        {
+            if (!settings)
+            {
+                return;
+            }
+
+#define COPY_TARGET settings
+#include <Atom/Feature/ParamMacros/StartParamCopySettingsTo.inl>
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+#undef COPY_TARGET
+        }
+
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/FilmGrainComponentController.cpp b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/FilmGrainComponentController.cpp
new file mode 100644
index 0000000000..f7922f60c1
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/FilmGrainComponentController.cpp
@@ -0,0 +1,162 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <PostProcess/FilmGrain/FilmGrainComponentController.h>
+
+#include <AzCore/RTTI/BehaviorContext.h>
+
+#include <Atom/RPI.Public/Scene.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        void FilmGrainComponentController::Reflect(ReflectContext* context)
+        {
+            FilmGrainComponentConfig::Reflect(context);
+
+            if (auto* serializeContext = azrtti_cast<SerializeContext*>(context))
+            {
+                serializeContext->Class<FilmGrainComponentController>()
+                    ->Version(0)
+                    ->Field("Configuration", &FilmGrainComponentController::m_configuration);
+            }
+
+            if (AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(context))
+            {
+                behaviorContext->EBus<FilmGrainRequestBus>("FilmGrainRequestBus")
+                    ->Attribute(AZ::Script::Attributes::Module, "render")
+                    ->Attribute(AZ::Script::Attributes::Scope, AZ::Script::Attributes::ScopeFlags::Common)
+                // Auto-gen behavior context...
+#define PARAM_EVENT_BUS FilmGrainRequestBus::Events
+#include <Atom/Feature/ParamMacros/StartParamBehaviorContext.inl>
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+#undef PARAM_EVENT_BUS
+
+                    ;
+            }
+        }
+
+        void FilmGrainComponentController::GetProvidedServices(AZ::ComponentDescriptor::DependencyArrayType& provided)
+        {
+            provided.push_back(AZ_CRC_CE("FilmGrainService"));
+        }
+
+        void FilmGrainComponentController::GetIncompatibleServices(AZ::ComponentDescriptor::DependencyArrayType& incompatible)
+        {
+            incompatible.push_back(AZ_CRC_CE("FilmGrainService"));
+        }
+
+        void FilmGrainComponentController::GetRequiredServices(AZ::ComponentDescriptor::DependencyArrayType& required)
+        {
+            required.push_back(AZ_CRC_CE("PostFXLayerService"));
+        }
+
+        FilmGrainComponentController::FilmGrainComponentController(const FilmGrainComponentConfig& config)
+            : m_configuration(config)
+        {
+        }
+
+        void FilmGrainComponentController::Activate(EntityId entityId)
+        {
+            m_entityId = entityId;
+
+            PostProcessFeatureProcessorInterface* fp =
+                RPI::Scene::GetFeatureProcessorForEntity<PostProcessFeatureProcessorInterface>(m_entityId);
+            if (fp)
+            {
+                m_postProcessInterface = fp->GetOrCreateSettingsInterface(m_entityId);
+                if (m_postProcessInterface)
+                {
+                    m_settingsInterface = m_postProcessInterface->GetOrCreateFilmGrainSettingsInterface();
+                    OnConfigChanged();
+                }
+            }
+            FilmGrainRequestBus::Handler::BusConnect(m_entityId);
+        }
+
+        void FilmGrainComponentController::Deactivate()
+        {
+            FilmGrainRequestBus::Handler::BusDisconnect(m_entityId);
+
+            if (m_postProcessInterface)
+            {
+                m_postProcessInterface->RemoveFilmGrainSettingsInterface();
+            }
+
+            m_postProcessInterface = nullptr;
+            m_settingsInterface = nullptr;
+            m_entityId.SetInvalid();
+        }
+
+        // Getters & Setters...
+
+        void FilmGrainComponentController::SetConfiguration(const FilmGrainComponentConfig& config)
+        {
+            m_configuration = config;
+            OnConfigChanged();
+        }
+
+        const FilmGrainComponentConfig& FilmGrainComponentController::GetConfiguration() const
+        {
+            return m_configuration;
+        }
+
+        void FilmGrainComponentController::OnConfigChanged()
+        {
+            if (m_settingsInterface)
+            {
+                m_configuration.CopySettingsTo(m_settingsInterface);
+                m_settingsInterface->OnConfigChanged();
+            }
+        }
+
+        // Auto-gen getter/setter function definitions...
+        // The setter functions will set the values on the Atom settings class, then get the value back
+        // from the settings class to set the local configuration. This is in case the settings class
+        // applies some custom logic that results in the set value being different from the input
+#define AZ_GFX_COMMON_PARAM(ValueType, Name, MemberName, DefaultValue)                                                                     \
+    ValueType FilmGrainComponentController::Get##Name() const                                                                              \
+    {                                                                                                                                      \
+        return m_configuration.MemberName;                                                                                                 \
+    }                                                                                                                                      \
+    void FilmGrainComponentController::Set##Name(ValueType val)                                                                            \
+    {                                                                                                                                      \
+        if (m_settingsInterface)                                                                                                           \
+        {                                                                                                                                  \
+            m_settingsInterface->Set##Name(val);                                                                                           \
+            m_settingsInterface->OnConfigChanged();                                                                                        \
+            m_configuration.MemberName = m_settingsInterface->Get##Name();                                                                 \
+        }                                                                                                                                  \
+        else                                                                                                                               \
+        {                                                                                                                                  \
+            m_configuration.MemberName = val;                                                                                              \
+        }                                                                                                                                  \
+    }
+
+#define AZ_GFX_COMMON_OVERRIDE(ValueType, Name, MemberName, OverrideValueType)                                                             \
+    OverrideValueType FilmGrainComponentController::Get##Name##Override() const                                                            \
+    {                                                                                                                                      \
+        return m_configuration.MemberName##Override;                                                                                       \
+    }                                                                                                                                      \
+    void FilmGrainComponentController::Set##Name##Override(OverrideValueType val)                                                          \
+    {                                                                                                                                      \
+        m_configuration.MemberName##Override = val;                                                                                        \
+        if (m_settingsInterface)                                                                                                           \
+        {                                                                                                                                  \
+            m_settingsInterface->Set##Name##Override(val);                                                                                 \
+            m_settingsInterface->OnConfigChanged();                                                                                        \
+        }                                                                                                                                  \
+    }
+
+#include <Atom/Feature/ParamMacros/MapAllCommon.inl>
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/FilmGrainComponentController.h b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/FilmGrainComponentController.h
new file mode 100644
index 0000000000..a6ed106a52
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/FilmGrain/FilmGrainComponentController.h
@@ -0,0 +1,62 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainConstants.h>
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainSettingsInterface.h>
+#include <Atom/Feature/PostProcess/PostProcessFeatureProcessorInterface.h>
+#include <Atom/Feature/PostProcess/PostProcessSettingsInterface.h>
+
+#include <AtomLyIntegration/CommonFeatures/PostProcess/FilmGrain/FilmGrainBus.h>
+#include <AtomLyIntegration/CommonFeatures/PostProcess/FilmGrain/FilmGrainComponentConfig.h>
+
+#include <AzCore/Component/Component.h>
+#include <AzCore/Component/TransformBus.h>
+
+
+namespace AZ
+{
+    namespace Render
+    {
+        class FilmGrainComponentController final : public FilmGrainRequestBus::Handler
+        {
+        public:
+            friend class EditorFilmGrainComponent;
+
+            AZ_TYPE_INFO(AZ::Render::FilmGrainComponentController, "{732714F9-7CEF-4874-8614-0F5F50BBC6C1}");
+            static void Reflect(AZ::ReflectContext* context);
+            static void GetProvidedServices(AZ::ComponentDescriptor::DependencyArrayType& provided);
+            static void GetIncompatibleServices(AZ::ComponentDescriptor::DependencyArrayType& incompatible);
+            static void GetRequiredServices(AZ::ComponentDescriptor::DependencyArrayType& required);
+
+            FilmGrainComponentController() = default;
+            FilmGrainComponentController(const FilmGrainComponentConfig& config);
+
+            void Activate(EntityId entityId);
+            void Deactivate();
+            void SetConfiguration(const FilmGrainComponentConfig& config);
+            const FilmGrainComponentConfig& GetConfiguration() const;
+
+            // Auto-gen function override declarations (functions definitions in .cpp)...
+#include <Atom/Feature/ParamMacros/StartParamFunctionsOverride.inl>
+#include <Atom/Feature/PostProcess/FilmGrain/FilmGrainParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+
+        private:
+            AZ_DISABLE_COPY(FilmGrainComponentController);
+
+            void OnConfigChanged();
+
+            PostProcessSettingsInterface* m_postProcessInterface = nullptr;
+            FilmGrainSettingsInterface* m_settingsInterface = nullptr;
+            FilmGrainComponentConfig m_configuration;
+            EntityId m_entityId;
+        };
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/EditorPaniniProjectionComponent.cpp b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/EditorPaniniProjectionComponent.cpp
new file mode 100644
index 0000000000..4544a59e25
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/EditorPaniniProjectionComponent.cpp
@@ -0,0 +1,95 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <PostProcess/PaniniProjection/EditorPaniniProjectionComponent.h>
+#include <AzCore/RTTI/BehaviorContext.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        void EditorPaniniProjectionComponent::Reflect(AZ::ReflectContext* context)
+        {
+            BaseClass::Reflect(context);
+
+            if (AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(context))
+            {
+                serializeContext->Class<EditorPaniniProjectionComponent, BaseClass>()->Version(0);
+
+                if (AZ::EditContext* editContext = serializeContext->GetEditContext())
+                {
+                    editContext->Class<EditorPaniniProjectionComponent>("Panini Projection", "Controls the Panini Projection")
+                        ->ClassElement(Edit::ClassElements::EditorData, "")
+                        ->Attribute(Edit::Attributes::Category, "Atom")
+                        ->Attribute(
+                            AZ::Edit::Attributes::Icon, "Icons/Components/Component_Placeholder.svg") // [GFX TODO ATOM-2672][PostFX] need to create icons for PostProcessing.
+                        ->Attribute(
+                            AZ::Edit::Attributes::ViewportIcon,
+                            "Icons/Components/Viewport/Component_Placeholder.svg") // [GFX TODO ATOM-2672][PostFX] need to create icons for PostProcessing.
+                        ->Attribute(Edit::Attributes::AppearsInAddComponentMenu, AZ_CRC("Game", 0x232b318c))
+                        ->Attribute(Edit::Attributes::AutoExpand, true)
+                        ->Attribute(
+                            Edit::Attributes::HelpPageURL,
+                            "https://o3de.org/docs/user-guide/components/reference/atom/PaniniProjection/") // [TODO ATOM-2672][PostFX] need create page for PostProcessing.
+                        ;
+
+                    editContext->Class<PaniniProjectionComponentController>("PaniniProjectionComponentController", "")
+                        ->ClassElement(AZ::Edit::ClassElements::EditorData, "")
+                        ->Attribute(AZ::Edit::Attributes::AutoExpand, true)
+                        ->DataElement(AZ::Edit::UIHandlers::Default, &PaniniProjectionComponentController::m_configuration, "Configuration", "")
+                        ->Attribute(AZ::Edit::Attributes::Visibility, AZ::Edit::PropertyVisibility::ShowChildrenOnly);
+
+                    editContext->Class<PaniniProjectionComponentConfig>("PaniniProjectionComponentConfig", "")
+                        ->DataElement(
+                            Edit::UIHandlers::CheckBox, &PaniniProjectionComponentConfig::m_enabled, "Enable Panini Projection", "Enable Panini Projection.")
+                        ->Attribute(Edit::Attributes::ChangeNotify, Edit::PropertyRefreshLevels::ValuesOnly)
+
+                        ->DataElement(AZ::Edit::UIHandlers::Slider, &PaniniProjectionComponentConfig::m_depth, "Depth", "Depth of focal point")
+                        ->Attribute(AZ::Edit::Attributes::Min, 0.0f)
+                        ->Attribute(AZ::Edit::Attributes::SoftMax, 10.f)
+                        ->Attribute(AZ::Edit::Attributes::Max, 100.f)
+                        ->Attribute(AZ::Edit::Attributes::ChangeNotify, Edit::PropertyRefreshLevels::ValuesOnly)
+                        ->Attribute(Edit::Attributes::ReadOnly, &PaniniProjectionComponentConfig::ArePropertiesReadOnly)
+
+                        // Overrides
+                        ->ClassElement(AZ::Edit::ClassElements::Group, "Overrides")
+                        ->Attribute(AZ::Edit::Attributes::AutoExpand, false)
+
+                    // Auto-gen editor context settings for overrides
+#define EDITOR_CLASS PaniniProjectionComponentConfig
+#include <Atom/Feature/ParamMacros/StartOverrideEditorContext.inl>
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+#undef EDITOR_CLASS
+                        ;
+                }
+            }
+
+            if (auto behaviorContext = azrtti_cast<BehaviorContext*>(context))
+            {
+                behaviorContext->Class<EditorPaniniProjectionComponent>()->RequestBus("PaniniProjectionRequestBus");
+
+                behaviorContext
+                    ->ConstantProperty("EditorPaniniProjectionComponentTypeId", BehaviorConstant(Uuid(PaniniProjection::EditorPaniniProjectionComponentTypeId)))
+                    ->Attribute(AZ::Script::Attributes::Module, "render")
+                    ->Attribute(AZ::Script::Attributes::Scope, AZ::Script::Attributes::ScopeFlags::Automation);
+            }
+        }
+
+        EditorPaniniProjectionComponent::EditorPaniniProjectionComponent(const PaniniProjectionComponentConfig& config)
+            : BaseClass(config)
+        {
+        }
+
+        u32 EditorPaniniProjectionComponent::OnConfigurationChanged()
+        {
+            m_controller.OnConfigChanged();
+            return Edit::PropertyRefreshLevels::AttributesAndValues;
+        }
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/EditorPaniniProjectionComponent.h b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/EditorPaniniProjectionComponent.h
new file mode 100644
index 0000000000..5ecd425ec2
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/EditorPaniniProjectionComponent.h
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <Atom/Feature/PostProcess/DepthOfField/DepthOfFieldConstants.h>
+#include <AzToolsFramework/ToolsComponents/EditorComponentAdapter.h>
+#include <PostProcess/PaniniProjection/PaniniProjectionComponent.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        namespace PaniniProjection
+        {
+            static constexpr const char* const EditorPaniniProjectionComponentTypeId = "{213CFFC8-E9E6-46EA-9DBE-B779F0B2A823}";
+        }
+
+        class EditorPaniniProjectionComponent final
+            : public AzToolsFramework::Components::
+                  EditorComponentAdapter<PaniniProjectionComponentController, PaniniProjectionComponent, PaniniProjectionComponentConfig>
+        {
+        public:
+            using BaseClass = AzToolsFramework::Components::
+                EditorComponentAdapter<PaniniProjectionComponentController, PaniniProjectionComponent, PaniniProjectionComponentConfig>;
+            AZ_EDITOR_COMPONENT(AZ::Render::EditorPaniniProjectionComponent, PaniniProjection::EditorPaniniProjectionComponentTypeId, BaseClass);
+
+            static void Reflect(AZ::ReflectContext* context);
+
+            EditorPaniniProjectionComponent() = default;
+            EditorPaniniProjectionComponent(const PaniniProjectionComponentConfig& config);
+
+            //! EditorRenderComponentAdapter overrides...
+            AZ::u32 OnConfigurationChanged() override;
+        };
+
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/PaniniProjectionComponent.cpp b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/PaniniProjectionComponent.cpp
new file mode 100644
index 0000000000..eee06da0ba
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/PaniniProjectionComponent.cpp
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <AzCore/RTTI/BehaviorContext.h>
+#include <PostProcess/PaniniProjection/PaniniProjectionComponent.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        PaniniProjectionComponent::PaniniProjectionComponent(const PaniniProjectionComponentConfig& config)
+            : BaseClass(config)
+        {
+        }
+
+        void PaniniProjectionComponent::Reflect(AZ::ReflectContext* context)
+        {
+            BaseClass::Reflect(context);
+
+            if (auto serializeContext = azrtti_cast<AZ::SerializeContext*>(context))
+            {
+                serializeContext->Class<PaniniProjectionComponent, BaseClass>();
+            }
+
+            if (auto behaviorContext = azrtti_cast<BehaviorContext*>(context))
+            {
+                behaviorContext->Class<PaniniProjectionComponent>()->RequestBus("PaniniProjectionRequestBus");
+
+                behaviorContext->ConstantProperty("PaniniProjectionComponentTypeId", BehaviorConstant(Uuid(PaniniProjection::PaniniProjectionComponentTypeId)))
+                    ->Attribute(AZ::Script::Attributes::Module, "render")
+                    ->Attribute(AZ::Script::Attributes::Scope, AZ::Script::Attributes::ScopeFlags::Common);
+            }
+        }
+
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/PaniniProjectionComponent.h b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/PaniniProjectionComponent.h
new file mode 100644
index 0000000000..8aa2550c2a
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/PaniniProjectionComponent.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionConstants.h>
+#include <PostProcess/PaniniProjection/PaniniProjectionComponentController.h>
+#include <AtomLyIntegration/CommonFeatures/PostProcess/PaniniProjection/PaniniProjectionComponentConfig.h>
+#include <AzCore/Component/Component.h>
+#include <AzFramework/Components/ComponentAdapter.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        namespace PaniniProjection
+        {
+            static constexpr const char* const PaniniProjectionComponentTypeId = "{87B77D17-1C0D-494B-88A2-15CB136BD9E0}";
+        }
+
+        class PaniniProjectionComponent final
+            : public AzFramework::Components::ComponentAdapter<PaniniProjectionComponentController, PaniniProjectionComponentConfig>
+        {
+        public:
+            using BaseClass = AzFramework::Components::ComponentAdapter<PaniniProjectionComponentController, PaniniProjectionComponentConfig>;
+            AZ_COMPONENT(AZ::Render::PaniniProjectionComponent, PaniniProjection::PaniniProjectionComponentTypeId, BaseClass);
+
+            PaniniProjectionComponent() = default;
+            PaniniProjectionComponent(const PaniniProjectionComponentConfig& config);
+
+            static void Reflect(AZ::ReflectContext* context);
+        };
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/PaniniProjectionComponentConfig.cpp b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/PaniniProjectionComponentConfig.cpp
new file mode 100644
index 0000000000..a7d3b4af7f
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/PaniniProjectionComponentConfig.cpp
@@ -0,0 +1,62 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <AtomLyIntegration/CommonFeatures/PostProcess/PaniniProjection/PaniniProjectionComponentConfig.h>
+#include <AzCore/Serialization/EditContext.h>
+#include <AzCore/Serialization/SerializeContext.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        void PaniniProjectionComponentConfig::Reflect(ReflectContext* context)
+        {
+            if (auto serializeContext = azrtti_cast<AZ::SerializeContext*>(context))
+            {
+                serializeContext->Class<PaniniProjectionComponentConfig, ComponentConfig>()->Version(0)
+
+                // Auto-gen serialize context code...
+#define SERIALIZE_CLASS PaniniProjectionComponentConfig
+#include <Atom/Feature/ParamMacros/StartParamSerializeContext.inl>
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+#undef SERIALIZE_CLASS
+                    ;
+            }
+        }
+
+        void PaniniProjectionComponentConfig::CopySettingsFrom(PaniniProjectionSettingsInterface* settings)
+        {
+            if (!settings)
+            {
+                return;
+            }
+
+#define COPY_SOURCE settings
+#include <Atom/Feature/ParamMacros/StartParamCopySettingsFrom.inl>
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+#undef COPY_SOURCE
+        }
+
+        void PaniniProjectionComponentConfig::CopySettingsTo(PaniniProjectionSettingsInterface* settings)
+        {
+            if (!settings)
+            {
+                return;
+            }
+
+#define COPY_TARGET settings
+#include <Atom/Feature/ParamMacros/StartParamCopySettingsTo.inl>
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+#undef COPY_TARGET
+        }
+
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/PaniniProjectionComponentController.cpp b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/PaniniProjectionComponentController.cpp
new file mode 100644
index 0000000000..4730b784fb
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/PaniniProjectionComponentController.cpp
@@ -0,0 +1,162 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <PostProcess/PaniniProjection/PaniniProjectionComponentController.h>
+
+#include <AzCore/RTTI/BehaviorContext.h>
+
+#include <Atom/RPI.Public/Scene.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        void PaniniProjectionComponentController::Reflect(ReflectContext* context)
+        {
+            PaniniProjectionComponentConfig::Reflect(context);
+
+            if (auto* serializeContext = azrtti_cast<SerializeContext*>(context))
+            {
+                serializeContext->Class<PaniniProjectionComponentController>()
+                ->Version(0)
+                ->Field("Configuration", &PaniniProjectionComponentController::m_configuration);
+            }
+
+            if (AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(context))
+            {
+                behaviorContext->EBus<PaniniProjectionRequestBus>("PaniniProjectionRequestBus")
+                    ->Attribute(AZ::Script::Attributes::Module, "render")
+                    ->Attribute(AZ::Script::Attributes::Scope, AZ::Script::Attributes::ScopeFlags::Common)
+                // Auto-gen behavior context...
+#define PARAM_EVENT_BUS PaniniProjectionRequestBus::Events
+#include <Atom/Feature/ParamMacros/StartParamBehaviorContext.inl>
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+#undef PARAM_EVENT_BUS
+
+                    ;
+            }
+        }
+
+        void PaniniProjectionComponentController::GetProvidedServices(AZ::ComponentDescriptor::DependencyArrayType& provided)
+        {
+            provided.push_back(AZ_CRC_CE("PaniniProjectionService"));
+        }
+
+        void PaniniProjectionComponentController::GetIncompatibleServices(AZ::ComponentDescriptor::DependencyArrayType& incompatible)
+        {
+            incompatible.push_back(AZ_CRC_CE("PaniniProjectionService"));
+        }
+
+        void PaniniProjectionComponentController::GetRequiredServices(AZ::ComponentDescriptor::DependencyArrayType& required)
+        {
+            required.push_back(AZ_CRC_CE("PostFXLayerService"));
+        }
+
+        PaniniProjectionComponentController::PaniniProjectionComponentController(const PaniniProjectionComponentConfig& config)
+            : m_configuration(config)
+        {
+        }
+
+        void PaniniProjectionComponentController::Activate(EntityId entityId)
+        {
+            m_entityId = entityId;
+
+            PostProcessFeatureProcessorInterface* fp =
+                RPI::Scene::GetFeatureProcessorForEntity<PostProcessFeatureProcessorInterface>(m_entityId);
+            if (fp)
+            {
+                m_postProcessInterface = fp->GetOrCreateSettingsInterface(m_entityId);
+                if (m_postProcessInterface)
+                {
+                    m_settingsInterface = m_postProcessInterface->GetOrCreatePaniniProjectionSettingsInterface();
+                    OnConfigChanged();
+                }
+            }
+            PaniniProjectionRequestBus::Handler::BusConnect(m_entityId);
+        }
+
+        void PaniniProjectionComponentController::Deactivate()
+        {
+            PaniniProjectionRequestBus::Handler::BusDisconnect(m_entityId);
+
+            if (m_postProcessInterface)
+            {
+                m_postProcessInterface->RemovePaniniProjectionSettingsInterface();
+            }
+
+            m_postProcessInterface = nullptr;
+            m_settingsInterface = nullptr;
+            m_entityId.SetInvalid();
+        }
+
+        // Getters & Setters...
+
+        void PaniniProjectionComponentController::SetConfiguration(const PaniniProjectionComponentConfig& config)
+        {
+            m_configuration = config;
+            OnConfigChanged();
+        }
+
+        const PaniniProjectionComponentConfig& PaniniProjectionComponentController::GetConfiguration() const
+        {
+            return m_configuration;
+        }
+
+        void PaniniProjectionComponentController::OnConfigChanged()
+        {
+            if (m_settingsInterface)
+            {
+                m_configuration.CopySettingsTo(m_settingsInterface);
+                m_settingsInterface->OnConfigChanged();
+            }
+        }
+
+        // Auto-gen getter/setter function definitions...
+        // The setter functions will set the values on the Atom settings class, then get the value back
+        // from the settings class to set the local configuration. This is in case the settings class
+        // applies some custom logic that results in the set value being different from the input
+#define AZ_GFX_COMMON_PARAM(ValueType, Name, MemberName, DefaultValue)                                                                     \
+    ValueType PaniniProjectionComponentController::Get##Name() const                                                                              \
+    {                                                                                                                                      \
+        return m_configuration.MemberName;                                                                                                 \
+    }                                                                                                                                      \
+    void PaniniProjectionComponentController::Set##Name(ValueType val)                                                                            \
+    {                                                                                                                                      \
+        if (m_settingsInterface)                                                                                                           \
+        {                                                                                                                                  \
+            m_settingsInterface->Set##Name(val);                                                                                           \
+            m_settingsInterface->OnConfigChanged();                                                                                        \
+            m_configuration.MemberName = m_settingsInterface->Get##Name();                                                                 \
+        }                                                                                                                                  \
+        else                                                                                                                               \
+        {                                                                                                                                  \
+            m_configuration.MemberName = val;                                                                                              \
+        }                                                                                                                                  \
+    }
+
+#define AZ_GFX_COMMON_OVERRIDE(ValueType, Name, MemberName, OverrideValueType)                                                             \
+    OverrideValueType PaniniProjectionComponentController::Get##Name##Override() const                                                            \
+    {                                                                                                                                      \
+        return m_configuration.MemberName##Override;                                                                                       \
+    }                                                                                                                                      \
+    void PaniniProjectionComponentController::Set##Name##Override(OverrideValueType val)                                                          \
+    {                                                                                                                                      \
+        m_configuration.MemberName##Override = val;                                                                                        \
+        if (m_settingsInterface)                                                                                                           \
+        {                                                                                                                                  \
+            m_settingsInterface->Set##Name##Override(val);                                                                                 \
+            m_settingsInterface->OnConfigChanged();                                                                                        \
+        }                                                                                                                                  \
+    }
+
+#include <Atom/Feature/ParamMacros/MapAllCommon.inl>
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/PaniniProjectionComponentController.h b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/PaniniProjectionComponentController.h
new file mode 100644
index 0000000000..2a4242c933
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/PaniniProjection/PaniniProjectionComponentController.h
@@ -0,0 +1,62 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionConstants.h>
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionSettingsInterface.h>
+#include <Atom/Feature/PostProcess/PostProcessFeatureProcessorInterface.h>
+#include <Atom/Feature/PostProcess/PostProcessSettingsInterface.h>
+
+#include <AtomLyIntegration/CommonFeatures/PostProcess/PaniniProjection/PaniniProjectionBus.h>
+#include <AtomLyIntegration/CommonFeatures/PostProcess/PaniniProjection/PaniniProjectionComponentConfig.h>
+
+#include <AzCore/Component/Component.h>
+#include <AzCore/Component/TransformBus.h>
+
+
+namespace AZ
+{
+    namespace Render
+    {
+        class PaniniProjectionComponentController final : public PaniniProjectionRequestBus::Handler
+        {
+        public:
+            friend class EditorPaniniProjectionComponent;
+
+            AZ_TYPE_INFO(AZ::Render::PaniniProjectionComponentController, "{15B93DBF-D7E4-4F39-94BB-5F97606CF858}");
+            static void Reflect(AZ::ReflectContext* context);
+            static void GetProvidedServices(AZ::ComponentDescriptor::DependencyArrayType& provided);
+            static void GetIncompatibleServices(AZ::ComponentDescriptor::DependencyArrayType& incompatible);
+            static void GetRequiredServices(AZ::ComponentDescriptor::DependencyArrayType& required);
+
+            PaniniProjectionComponentController() = default;
+            PaniniProjectionComponentController(const PaniniProjectionComponentConfig& config);
+
+            void Activate(EntityId entityId);
+            void Deactivate();
+            void SetConfiguration(const PaniniProjectionComponentConfig& config);
+            const PaniniProjectionComponentConfig& GetConfiguration() const;
+
+            // Auto-gen function override declarations (functions definitions in .cpp)...
+#include <Atom/Feature/ParamMacros/StartParamFunctionsOverride.inl>
+#include <Atom/Feature/PostProcess/PaniniProjection/PaniniProjectionParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+
+        private:
+            AZ_DISABLE_COPY(PaniniProjectionComponentController);
+
+            void OnConfigChanged();
+
+            PostProcessSettingsInterface* m_postProcessInterface = nullptr;
+            PaniniProjectionSettingsInterface* m_settingsInterface = nullptr;
+            PaniniProjectionComponentConfig m_configuration;
+            EntityId m_entityId;
+        };
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/EditorVignetteComponent.cpp b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/EditorVignetteComponent.cpp
new file mode 100644
index 0000000000..c6da0e72ea
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/EditorVignetteComponent.cpp
@@ -0,0 +1,94 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <PostProcess/Vignette/EditorVignetteComponent.h>
+#include <AzCore/RTTI/BehaviorContext.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        void EditorVignetteComponent::Reflect(AZ::ReflectContext* context)
+        {
+            BaseClass::Reflect(context);
+
+            if (AZ::SerializeContext* serializeContext = azrtti_cast<AZ::SerializeContext*>(context))
+            {
+                serializeContext->Class<EditorVignetteComponent, BaseClass>()->Version(0);
+
+                if (AZ::EditContext* editContext = serializeContext->GetEditContext())
+                {
+                    editContext->Class<EditorVignetteComponent>("Vignette", "Controls the Vignette")
+                        ->ClassElement(Edit::ClassElements::EditorData, "")
+                        ->Attribute(Edit::Attributes::Category, "Atom")
+                        ->Attribute(
+                            AZ::Edit::Attributes::Icon, "Icons/Components/Component_Placeholder.svg") // [GFX TODO ATOM-2672][PostFX] need to create icons for PostProcessing.
+                        ->Attribute(
+                            AZ::Edit::Attributes::ViewportIcon,
+                            "Icons/Components/Viewport/Component_Placeholder.svg") // [GFX TODO ATOM-2672][PostFX] need to create icons for PostProcessing.
+                        ->Attribute(Edit::Attributes::AppearsInAddComponentMenu, AZ_CRC("Game", 0x232b318c))
+                        ->Attribute(Edit::Attributes::AutoExpand, true)
+                        ->Attribute(
+                            Edit::Attributes::HelpPageURL,
+                            "https://o3de.org/docs/user-guide/components/reference/atom/Vignette/") // [TODO ATOM-2672][PostFX] need create page for PostProcessing.
+                        ;
+
+                    editContext->Class<VignetteComponentController>("VignetteComponentController", "")
+                        ->ClassElement(AZ::Edit::ClassElements::EditorData, "")
+                        ->Attribute(AZ::Edit::Attributes::AutoExpand, true)
+                        ->DataElement(AZ::Edit::UIHandlers::Default, &VignetteComponentController::m_configuration, "Configuration", "")
+                        ->Attribute(AZ::Edit::Attributes::Visibility, AZ::Edit::PropertyVisibility::ShowChildrenOnly);
+
+                    editContext->Class<VignetteComponentConfig>("VignetteComponentConfig", "")
+                        ->DataElement(
+                            Edit::UIHandlers::CheckBox, &VignetteComponentConfig::m_enabled, "Enable Vignette", "Enable Vignette.")
+                        ->Attribute(Edit::Attributes::ChangeNotify, Edit::PropertyRefreshLevels::ValuesOnly)
+
+                        ->DataElement(AZ::Edit::UIHandlers::Slider, &VignetteComponentConfig::m_intensity, "Intensity", "Intensity of effect")
+                        ->Attribute(AZ::Edit::Attributes::Min, 0.0f)
+                        ->Attribute(AZ::Edit::Attributes::Max, 1.0f)
+                        ->Attribute(AZ::Edit::Attributes::ChangeNotify, Edit::PropertyRefreshLevels::ValuesOnly)
+                        ->Attribute(Edit::Attributes::ReadOnly, &VignetteComponentConfig::ArePropertiesReadOnly)
+
+                        // Overrides
+                        ->ClassElement(AZ::Edit::ClassElements::Group, "Overrides")
+                        ->Attribute(AZ::Edit::Attributes::AutoExpand, false)
+
+                    // Auto-gen editor context settings for overrides
+#define EDITOR_CLASS VignetteComponentConfig
+#include <Atom/Feature/ParamMacros/StartOverrideEditorContext.inl>
+#include <Atom/Feature/PostProcess/Vignette/VignetteParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+#undef EDITOR_CLASS
+                        ;
+                }
+            }
+
+            if (auto behaviorContext = azrtti_cast<BehaviorContext*>(context))
+            {
+                behaviorContext->Class<EditorVignetteComponent>()->RequestBus("VignetteRequestBus");
+
+                behaviorContext
+                    ->ConstantProperty("EditorVignetteComponentTypeId", BehaviorConstant(Uuid(Vignette::EditorVignetteComponentTypeId)))
+                    ->Attribute(AZ::Script::Attributes::Module, "render")
+                    ->Attribute(AZ::Script::Attributes::Scope, AZ::Script::Attributes::ScopeFlags::Automation);
+            }
+        }
+
+        EditorVignetteComponent::EditorVignetteComponent(const VignetteComponentConfig& config)
+            : BaseClass(config)
+        {
+        }
+
+        u32 EditorVignetteComponent::OnConfigurationChanged()
+        {
+            m_controller.OnConfigChanged();
+            return Edit::PropertyRefreshLevels::AttributesAndValues;
+        }
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/EditorVignetteComponent.h b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/EditorVignetteComponent.h
new file mode 100644
index 0000000000..0751b5b271
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/EditorVignetteComponent.h
@@ -0,0 +1,43 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <Atom/Feature/PostProcess/DepthOfField/DepthOfFieldConstants.h>
+#include <AzToolsFramework/ToolsComponents/EditorComponentAdapter.h>
+#include <PostProcess/Vignette/VignetteComponent.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        namespace Vignette
+        {
+            static constexpr const char* const EditorVignetteComponentTypeId = "{8E362EA9-76D8-4EBC-B73D-400DF3DF8B4A}";
+        }
+
+        class EditorVignetteComponent final
+            : public AzToolsFramework::Components::
+                  EditorComponentAdapter<VignetteComponentController, VignetteComponent, VignetteComponentConfig>
+        {
+        public:
+            using BaseClass = AzToolsFramework::Components::
+                EditorComponentAdapter<VignetteComponentController, VignetteComponent, VignetteComponentConfig>;
+            AZ_EDITOR_COMPONENT(AZ::Render::EditorVignetteComponent, Vignette::EditorVignetteComponentTypeId, BaseClass);
+
+            static void Reflect(AZ::ReflectContext* context);
+
+            EditorVignetteComponent() = default;
+            EditorVignetteComponent(const VignetteComponentConfig& config);
+
+            //! EditorRenderComponentAdapter overrides...
+            AZ::u32 OnConfigurationChanged() override;
+        };
+
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/VignetteComponent.cpp b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/VignetteComponent.cpp
new file mode 100644
index 0000000000..1fc7d969e6
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/VignetteComponent.cpp
@@ -0,0 +1,41 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <AzCore/RTTI/BehaviorContext.h>
+#include <PostProcess/Vignette/VignetteComponent.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        VignetteComponent::VignetteComponent(const VignetteComponentConfig& config)
+            : BaseClass(config)
+        {
+        }
+
+        void VignetteComponent::Reflect(AZ::ReflectContext* context)
+        {
+            BaseClass::Reflect(context);
+
+            if (auto serializeContext = azrtti_cast<AZ::SerializeContext*>(context))
+            {
+                serializeContext->Class<VignetteComponent, BaseClass>();
+            }
+
+            if (auto behaviorContext = azrtti_cast<BehaviorContext*>(context))
+            {
+                behaviorContext->Class<VignetteComponent>()->RequestBus("VignetteRequestBus");
+
+                behaviorContext->ConstantProperty("VignetteComponentTypeId", BehaviorConstant(Uuid(Vignette::VignetteComponentTypeId)))
+                    ->Attribute(AZ::Script::Attributes::Module, "render")
+                    ->Attribute(AZ::Script::Attributes::Scope, AZ::Script::Attributes::ScopeFlags::Common);
+            }
+        }
+
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/VignetteComponent.h b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/VignetteComponent.h
new file mode 100644
index 0000000000..8ebb1e4715
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/VignetteComponent.h
@@ -0,0 +1,39 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <Atom/Feature/PostProcess/Vignette/VignetteConstants.h>
+#include <PostProcess/Vignette/VignetteComponentController.h>
+#include <AtomLyIntegration/CommonFeatures/PostProcess/Vignette/VignetteComponentConfig.h>
+#include <AzCore/Component/Component.h>
+#include <AzFramework/Components/ComponentAdapter.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        namespace Vignette
+        {
+            static constexpr const char* const VignetteComponentTypeId = "{93C2AD53-4722-4B33-BB23-BDBC1D423289}";
+        }
+
+        class VignetteComponent final
+            : public AzFramework::Components::ComponentAdapter<VignetteComponentController, VignetteComponentConfig>
+        {
+        public:
+            using BaseClass = AzFramework::Components::ComponentAdapter<VignetteComponentController, VignetteComponentConfig>;
+            AZ_COMPONENT(AZ::Render::VignetteComponent, Vignette::VignetteComponentTypeId, BaseClass);
+
+            VignetteComponent() = default;
+            VignetteComponent(const VignetteComponentConfig& config);
+
+            static void Reflect(AZ::ReflectContext* context);
+        };
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/VignetteComponentConfig.cpp b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/VignetteComponentConfig.cpp
new file mode 100644
index 0000000000..fd5e32601e
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/VignetteComponentConfig.cpp
@@ -0,0 +1,62 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <AtomLyIntegration/CommonFeatures/PostProcess/Vignette/VignetteComponentConfig.h>
+#include <AzCore/Serialization/EditContext.h>
+#include <AzCore/Serialization/SerializeContext.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        void VignetteComponentConfig::Reflect(ReflectContext* context)
+        {
+            if (auto serializeContext = azrtti_cast<AZ::SerializeContext*>(context))
+            {
+                serializeContext->Class<VignetteComponentConfig, ComponentConfig>()->Version(0)
+
+                // Auto-gen serialize context code...
+#define SERIALIZE_CLASS VignetteComponentConfig
+#include <Atom/Feature/ParamMacros/StartParamSerializeContext.inl>
+#include <Atom/Feature/PostProcess/Vignette/VignetteParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+#undef SERIALIZE_CLASS
+                    ;
+            }
+        }
+
+        void VignetteComponentConfig::CopySettingsFrom(VignetteSettingsInterface* settings)
+        {
+            if (!settings)
+            {
+                return;
+            }
+
+#define COPY_SOURCE settings
+#include <Atom/Feature/ParamMacros/StartParamCopySettingsFrom.inl>
+#include <Atom/Feature/PostProcess/Vignette/VignetteParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+#undef COPY_SOURCE
+        }
+
+        void VignetteComponentConfig::CopySettingsTo(VignetteSettingsInterface* settings)
+        {
+            if (!settings)
+            {
+                return;
+            }
+
+#define COPY_TARGET settings
+#include <Atom/Feature/ParamMacros/StartParamCopySettingsTo.inl>
+#include <Atom/Feature/PostProcess/Vignette/VignetteParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+#undef COPY_TARGET
+        }
+
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/VignetteComponentController.cpp b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/VignetteComponentController.cpp
new file mode 100644
index 0000000000..6030fb0c87
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/VignetteComponentController.cpp
@@ -0,0 +1,162 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#include <PostProcess/Vignette/VignetteComponentController.h>
+
+#include <AzCore/RTTI/BehaviorContext.h>
+
+#include <Atom/RPI.Public/Scene.h>
+
+namespace AZ
+{
+    namespace Render
+    {
+        void VignetteComponentController::Reflect(ReflectContext* context)
+        {
+            VignetteComponentConfig::Reflect(context);
+
+            if (auto* serializeContext = azrtti_cast<SerializeContext*>(context))
+            {
+                serializeContext->Class<VignetteComponentController>()
+                ->Version(0)
+                ->Field("Configuration", &VignetteComponentController::m_configuration);
+            }
+
+            if (AZ::BehaviorContext* behaviorContext = azrtti_cast<AZ::BehaviorContext*>(context))
+            {
+                behaviorContext->EBus<VignetteRequestBus>("VignetteRequestBus")
+                    ->Attribute(AZ::Script::Attributes::Module, "render")
+                    ->Attribute(AZ::Script::Attributes::Scope, AZ::Script::Attributes::ScopeFlags::Common)
+                // Auto-gen behavior context...
+#define PARAM_EVENT_BUS VignetteRequestBus::Events
+#include <Atom/Feature/ParamMacros/StartParamBehaviorContext.inl>
+#include <Atom/Feature/PostProcess/Vignette/VignetteParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+#undef PARAM_EVENT_BUS
+
+                    ;
+            }
+        }
+
+        void VignetteComponentController::GetProvidedServices(AZ::ComponentDescriptor::DependencyArrayType& provided)
+        {
+            provided.push_back(AZ_CRC_CE("VignetteService"));
+        }
+
+        void VignetteComponentController::GetIncompatibleServices(AZ::ComponentDescriptor::DependencyArrayType& incompatible)
+        {
+            incompatible.push_back(AZ_CRC_CE("VignetteService"));
+        }
+
+        void VignetteComponentController::GetRequiredServices(AZ::ComponentDescriptor::DependencyArrayType& required)
+        {
+            required.push_back(AZ_CRC_CE("PostFXLayerService"));
+        }
+
+        VignetteComponentController::VignetteComponentController(const VignetteComponentConfig& config)
+            : m_configuration(config)
+        {
+        }
+
+        void VignetteComponentController::Activate(EntityId entityId)
+        {
+            m_entityId = entityId;
+
+            PostProcessFeatureProcessorInterface* fp =
+                RPI::Scene::GetFeatureProcessorForEntity<PostProcessFeatureProcessorInterface>(m_entityId);
+            if (fp)
+            {
+                m_postProcessInterface = fp->GetOrCreateSettingsInterface(m_entityId);
+                if (m_postProcessInterface)
+                {
+                    m_settingsInterface = m_postProcessInterface->GetOrCreateVignetteSettingsInterface();
+                    OnConfigChanged();
+                }
+            }
+            VignetteRequestBus::Handler::BusConnect(m_entityId);
+        }
+
+        void VignetteComponentController::Deactivate()
+        {
+            VignetteRequestBus::Handler::BusDisconnect(m_entityId);
+
+            if (m_postProcessInterface)
+            {
+                m_postProcessInterface->RemoveVignetteSettingsInterface();
+            }
+
+            m_postProcessInterface = nullptr;
+            m_settingsInterface = nullptr;
+            m_entityId.SetInvalid();
+        }
+
+        // Getters & Setters...
+
+        void VignetteComponentController::SetConfiguration(const VignetteComponentConfig& config)
+        {
+            m_configuration = config;
+            OnConfigChanged();
+        }
+
+        const VignetteComponentConfig& VignetteComponentController::GetConfiguration() const
+        {
+            return m_configuration;
+        }
+
+        void VignetteComponentController::OnConfigChanged()
+        {
+            if (m_settingsInterface)
+            {
+                m_configuration.CopySettingsTo(m_settingsInterface);
+                m_settingsInterface->OnConfigChanged();
+            }
+        }
+
+        // Auto-gen getter/setter function definitions...
+        // The setter functions will set the values on the Atom settings class, then get the value back
+        // from the settings class to set the local configuration. This is in case the settings class
+        // applies some custom logic that results in the set value being different from the input
+#define AZ_GFX_COMMON_PARAM(ValueType, Name, MemberName, DefaultValue)                                                                     \
+    ValueType VignetteComponentController::Get##Name() const                                                                              \
+    {                                                                                                                                      \
+        return m_configuration.MemberName;                                                                                                 \
+    }                                                                                                                                      \
+    void VignetteComponentController::Set##Name(ValueType val)                                                                            \
+    {                                                                                                                                      \
+        if (m_settingsInterface)                                                                                                           \
+        {                                                                                                                                  \
+            m_settingsInterface->Set##Name(val);                                                                                           \
+            m_settingsInterface->OnConfigChanged();                                                                                        \
+            m_configuration.MemberName = m_settingsInterface->Get##Name();                                                                 \
+        }                                                                                                                                  \
+        else                                                                                                                               \
+        {                                                                                                                                  \
+            m_configuration.MemberName = val;                                                                                              \
+        }                                                                                                                                  \
+    }
+
+#define AZ_GFX_COMMON_OVERRIDE(ValueType, Name, MemberName, OverrideValueType)                                                             \
+    OverrideValueType VignetteComponentController::Get##Name##Override() const                                                            \
+    {                                                                                                                                      \
+        return m_configuration.MemberName##Override;                                                                                       \
+    }                                                                                                                                      \
+    void VignetteComponentController::Set##Name##Override(OverrideValueType val)                                                          \
+    {                                                                                                                                      \
+        m_configuration.MemberName##Override = val;                                                                                        \
+        if (m_settingsInterface)                                                                                                           \
+        {                                                                                                                                  \
+            m_settingsInterface->Set##Name##Override(val);                                                                                 \
+            m_settingsInterface->OnConfigChanged();                                                                                        \
+        }                                                                                                                                  \
+    }
+
+#include <Atom/Feature/ParamMacros/MapAllCommon.inl>
+#include <Atom/Feature/PostProcess/Vignette/VignetteParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/VignetteComponentController.h b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/VignetteComponentController.h
new file mode 100644
index 0000000000..fd010a62f4
--- /dev/null
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/Source/PostProcess/Vignette/VignetteComponentController.h
@@ -0,0 +1,62 @@
+/*
+ * Copyright (c) Contributors to the Open 3D Engine Project.
+ * For complete copyright and license terms please see the LICENSE at the root of this distribution.
+ *
+ * SPDX-License-Identifier: Apache-2.0 OR MIT
+ *
+ */
+
+#pragma once
+
+#include <Atom/Feature/PostProcess/Vignette/VignetteConstants.h>
+#include <Atom/Feature/PostProcess/Vignette/VignetteSettingsInterface.h>
+#include <Atom/Feature/PostProcess/PostProcessFeatureProcessorInterface.h>
+#include <Atom/Feature/PostProcess/PostProcessSettingsInterface.h>
+
+#include <AtomLyIntegration/CommonFeatures/PostProcess/Vignette/VignetteBus.h>
+#include <AtomLyIntegration/CommonFeatures/PostProcess/Vignette/VignetteComponentConfig.h>
+
+#include <AzCore/Component/Component.h>
+#include <AzCore/Component/TransformBus.h>
+
+
+namespace AZ
+{
+    namespace Render
+    {
+        class VignetteComponentController final : public VignetteRequestBus::Handler
+        {
+        public:
+            friend class EditorVignetteComponent;
+
+            AZ_TYPE_INFO(AZ::Render::VignetteComponentController, "{98B2F7E6-A8E3-443B-B301-E180FFE710F5}");
+            static void Reflect(AZ::ReflectContext* context);
+            static void GetProvidedServices(AZ::ComponentDescriptor::DependencyArrayType& provided);
+            static void GetIncompatibleServices(AZ::ComponentDescriptor::DependencyArrayType& incompatible);
+            static void GetRequiredServices(AZ::ComponentDescriptor::DependencyArrayType& required);
+
+            VignetteComponentController() = default;
+            VignetteComponentController(const VignetteComponentConfig& config);
+
+            void Activate(EntityId entityId);
+            void Deactivate();
+            void SetConfiguration(const VignetteComponentConfig& config);
+            const VignetteComponentConfig& GetConfiguration() const;
+
+            // Auto-gen function override declarations (functions definitions in .cpp)...
+#include <Atom/Feature/ParamMacros/StartParamFunctionsOverride.inl>
+#include <Atom/Feature/PostProcess/Vignette/VignetteParams.inl>
+#include <Atom/Feature/ParamMacros/EndParams.inl>
+
+        private:
+            AZ_DISABLE_COPY(VignetteComponentController);
+
+            void OnConfigChanged();
+
+            PostProcessSettingsInterface* m_postProcessInterface = nullptr;
+            VignetteSettingsInterface* m_settingsInterface = nullptr;
+            VignetteComponentConfig m_configuration;
+            EntityId m_entityId;
+        };
+    } // namespace Render
+} // namespace AZ
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/atomlyintegration_commonfeatures_editor_files.cmake b/Gems/AtomLyIntegration/CommonFeatures/Code/atomlyintegration_commonfeatures_editor_files.cmake
index 59cb374d69..fef30dd8bc 100644
--- a/Gems/AtomLyIntegration/CommonFeatures/Code/atomlyintegration_commonfeatures_editor_files.cmake
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/atomlyintegration_commonfeatures_editor_files.cmake
@@ -64,6 +64,12 @@ set(FILES
     Source/PostProcess/Bloom/EditorBloomComponent.h
     Source/PostProcess/ChromaticAberration/EditorChromaticAberrationComponent.cpp
     Source/PostProcess/ChromaticAberration/EditorChromaticAberrationComponent.h
+    Source/PostProcess/PaniniProjection/EditorPaniniProjectionComponent.cpp
+    Source/PostProcess/PaniniProjection/EditorPaniniProjectionComponent.h
+    Source/PostProcess/FilmGrain/EditorFilmGrainComponent.cpp
+    Source/PostProcess/FilmGrain/EditorFilmGrainComponent.h
+    Source/PostProcess/Vignette/EditorVignetteComponent.cpp
+    Source/PostProcess/Vignette/EditorVignetteComponent.h
     Source/PostProcess/ColorGrading/EditorHDRColorGradingComponent.cpp
     Source/PostProcess/ColorGrading/EditorHDRColorGradingComponent.h
     Source/PostProcess/DepthOfField/EditorDepthOfFieldComponent.cpp
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/atomlyintegration_commonfeatures_files.cmake b/Gems/AtomLyIntegration/CommonFeatures/Code/atomlyintegration_commonfeatures_files.cmake
index 03f1376cc0..6168bd3e97 100644
--- a/Gems/AtomLyIntegration/CommonFeatures/Code/atomlyintegration_commonfeatures_files.cmake
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/atomlyintegration_commonfeatures_files.cmake
@@ -87,6 +87,21 @@ set(FILES
     Source/PostProcess/ChromaticAberration/ChromaticAberrationComponentConfig.cpp
     Source/PostProcess/ChromaticAberration/ChromaticAberrationComponentController.cpp
     Source/PostProcess/ChromaticAberration/ChromaticAberrationComponentController.h
+    Source/PostProcess/PaniniProjection/PaniniProjectionComponent.cpp
+    Source/PostProcess/PaniniProjection/PaniniProjectionComponent.h
+    Source/PostProcess/PaniniProjection/PaniniProjectionComponentConfig.cpp
+    Source/PostProcess/PaniniProjection/PaniniProjectionComponentController.cpp
+    Source/PostProcess/PaniniProjection/PaniniProjectionComponentController.h
+    Source/PostProcess/FilmGrain/FilmGrainComponent.cpp
+    Source/PostProcess/FilmGrain/FilmGrainComponent.h
+    Source/PostProcess/FilmGrain/FilmGrainComponentConfig.cpp
+    Source/PostProcess/FilmGrain/FilmGrainComponentController.cpp
+    Source/PostProcess/FilmGrain/FilmGrainComponentController.h
+    Source/PostProcess/Vignette/VignetteComponent.cpp
+    Source/PostProcess/Vignette/VignetteComponent.h
+    Source/PostProcess/Vignette/VignetteComponentConfig.cpp
+    Source/PostProcess/Vignette/VignetteComponentController.cpp
+    Source/PostProcess/Vignette/VignetteComponentController.h
     Source/PostProcess/ColorGrading/HDRColorGradingComponent.cpp
     Source/PostProcess/ColorGrading/HDRColorGradingComponent.h
     Source/PostProcess/ColorGrading/HDRColorGradingComponentConfig.cpp
diff --git a/Gems/AtomLyIntegration/CommonFeatures/Code/atomlyintegration_commonfeatures_public_files.cmake b/Gems/AtomLyIntegration/CommonFeatures/Code/atomlyintegration_commonfeatures_public_files.cmake
index 00b63b4047..149695cc18 100644
--- a/Gems/AtomLyIntegration/CommonFeatures/Code/atomlyintegration_commonfeatures_public_files.cmake
+++ b/Gems/AtomLyIntegration/CommonFeatures/Code/atomlyintegration_commonfeatures_public_files.cmake
@@ -33,9 +33,15 @@ set(FILES
     Include/AtomLyIntegration/CommonFeatures/PostProcess/PostFxLayerComponentConfig.h
     Include/AtomLyIntegration/CommonFeatures/PostProcess/PostFxLayerComponentConstants.h
     Include/AtomLyIntegration/CommonFeatures/PostProcess/Bloom/BloomBus.h
-    Include/AtomLyIntegration/CommonFeatures/PostProcess/Bloom/BloomComponentConfig.h
+    Include/AtomLyIntegration/CommonFeatures/PostProcess/Bloom/BloomComponentConfig.h    
     Include/AtomLyIntegration/CommonFeatures/PostProcess/ChromaticAberration/ChromaticAberrationBus.h
-    Include/AtomLyIntegration/CommonFeatures/PostProcess/ChromaticAberration/ChromaticAberrationComponentConfig.h
+    Include/AtomLyIntegration/CommonFeatures/PostProcess/ChromaticAberration/ChromaticAberrationComponentConfig.h    
+    Include/AtomLyIntegration/CommonFeatures/PostProcess/PaniniProjection/PaniniProjectionBus.h
+    Include/AtomLyIntegration/CommonFeatures/PostProcess/PaniniProjection/PaniniProjectionComponentConfig.h    
+    Include/AtomLyIntegration/CommonFeatures/PostProcess/FilmGrain/FilmGrainBus.h
+    Include/AtomLyIntegration/CommonFeatures/PostProcess/FilmGrain/FilmGrainComponentConfig.h
+    Include/AtomLyIntegration/CommonFeatures/PostProcess/Vignette/VignetteBus.h
+    Include/AtomLyIntegration/CommonFeatures/PostProcess/Vignette/VignetteComponentConfig.h
     Include/AtomLyIntegration/CommonFeatures/PostProcess/DepthOfField/DepthOfFieldBus.h
     Include/AtomLyIntegration/CommonFeatures/PostProcess/DepthOfField/DepthOfFieldComponentConfig.h
     Include/AtomLyIntegration/CommonFeatures/PostProcess/DisplayMapper/DisplayMapperComponentBus.h
