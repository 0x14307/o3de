/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */



#include <scenesrg.srgi>

#include <Atom/Features/PostProcessing/FullscreenVertexUtil.azsli>
#include <Atom/Features/PostProcessing/FullscreenVertexInfo.azsli>
#include <Atom/Features/PostProcessing/FullscreenPixelInfo.azsli>

ShaderResourceGroup PassSrg : SRG_PerPass
{
    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };
    // output texture that will be sampled in the forward+ pass
    RWTexture2D<float> m_fullscreenShadow;
    
    struct Constants
    {
        float2 m_screenSize;
    };    
    
    Constants m_constantData;
    Texture2DArray<float> m_directionalLightShadowmap;    
}

#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>

#define ThreadGroupSize 16
[numthreads(ThreadGroupSize, ThreadGroupSize, 1)]
void MainCS(uint3 groupID : SV_GroupID, uint3 groupThreadID : SV_GroupThreadID)
{

    uint2 samplePos = groupID.xy * ThreadGroupSize + groupThreadID.xy;
    float2 uv = (float2) samplePos / PassSrg::m_constantData.m_screenSize;

    //float3 coord = float3(1,0,0);
    //float val = PassSrg::m_directionalLightShadowmap.Sample(PassSrg::LinearSampler, coord);
        
    
    if (uv.y < 0.5)
    PassSrg::m_fullscreenShadow[samplePos] = 1;
        else
    PassSrg::m_fullscreenShadow[samplePos] = 0
    ;
        
}
