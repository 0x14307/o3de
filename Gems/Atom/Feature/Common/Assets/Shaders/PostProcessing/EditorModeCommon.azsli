/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
#include <viewsrg.srgi>

#include <Atom/Features/SrgSemantics.azsli> 
#include <Atom/Features/PostProcessing/FullscreenPixelInfo.azsli>
#include <Atom/Features/PostProcessing/FullscreenVertex.azsli>

partial ShaderResourceGroup PassSrg : SRG_PerPass_WithFallback
{
    Texture2D<float4> m_framebuffer;
    Texture2D<float4> m_depth;
    Texture2D<float4> m_entityMask;

    // The final blend amount level that is used to scale the calculated blend values
    float m_finalBlendAmount;
    
    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

    Sampler PointSampler
    {
        MinFilter = Point;
        MagFilter = Point;
        MipFilter = Point;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

    float2 GetImageSize(Texture2D<float4> image)
    {
        float3 size = float3(0., 0., 0.);
        image.GetDimensions(size.x, size.y);
        return size;
    }

    float CalculateLinearDepth(const float zDepth)
    {
        return abs(((ViewSrg::GetFarZTimesNearZ()) / (ViewSrg::GetFarZMinusNearZ() * zDepth - ViewSrg::GetFarZ()))); 
    }

    float CalculateFinalBlendAmount(float t)
    {
        // Apply the final blend amount modifier
        return lerp(0.0, t, m_finalBlendAmount);
    }

    float4 CalculateOutputColor(const float3 inColor, const float3 finalEffect, float t)
    {
        float4 outColor;
        outColor.rgb = lerp(inColor, finalEffect, t);
        outColor.a = 1.0;
        return outColor;
    }

    float4 CalculateFinalBlendAmountAndOutputColor(const float3 inColor, const float3 finalEffect, float t)
    {
        return CalculateOutputColor(inColor, finalEffect, CalculateFinalBlendAmount(t));
    }
}