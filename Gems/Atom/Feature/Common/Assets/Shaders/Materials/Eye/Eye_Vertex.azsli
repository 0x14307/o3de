/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

// This #define magic allows you to use the EvaluateVertexGeometry function in this file without making it the final
// EvaluateVertexGeometry used in your shader. Simply #define EvaluateVertexGeometry before including this file
//
#ifndef EvaluateVertexGeometry
#define EvaluateVertexGeometry(IN)      EvaluateVertexGeometry_Eye(IN)
#endif

#include <Atom/RPI/TangentSpace.azsli>

VsOutput EvaluateVertexGeometry_Eye(
    float3 position,
    float3 normal,
    float4 tangent,
    float3 bitangent,
    float2 uv0,
    float2 uv1)
{
    VsOutput output;

    float4x4 objectToWorld = ObjectSrg::GetWorldMatrix();
    float4 worldPosition = mul(objectToWorld, float4(position, 1.0));
    output.m_worldPosition = worldPosition.xyz;
    output.m_position = mul(ViewSrg::m_viewProjectionMatrix, worldPosition);

    output.m_uv[0] = uv0;
    output.m_uv[1] = uv1;

    float3x3 objectToWorldIT = ObjectSrg::GetWorldMatrixInverseTranspose();
    ConstructTBN(normal, tangent, bitangent, objectToWorld, objectToWorldIT, output.m_normal, output.m_tangent, output.m_bitangent);

    output.m_localPosition = position.xyz;

    return output;
}

VsOutput EvaluateVertexGeometry_Eye(VsInput IN)
{
    return EvaluateVertexGeometry_Eye(
        IN.m_position,
        IN.m_normal,
        IN.m_tangent,
        IN.m_bitangent,
        IN.m_uv0,
        IN.m_uv1);
}
