/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
 
#include <viewsrg.srgi>
#include <Atom/Features/SrgSemantics.azsli>
 
#include <Atom/Features/PostProcessing/FullscreenPixelInfo.azsli>
#include <Atom/Features/PostProcessing/FullscreenVertex.azsli>
 
ShaderResourceGroup PassSrg : SRG_PerPass_WithFallback
{
    Texture2D<float4> m_framebuffer;
    Texture2D<float4> m_depth;
    Texture2D<float4> m_entityMask;
    
    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

    Sampler PointSampler
    {
        MinFilter = Point;
        MagFilter = Point;
        MipFilter = Point;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };
 
    float m_desaturationAmount;
}

static float2 maskSize;

float2 normalizedUV(float2 uv)
{
    return uv/maskSize;
}

static float offset[5] = {0.0, 1.0, 2.0, 3.0, 4.0};
static float weight[5] = {0.2270270270, 0.1945945946, 0.1216216216, 0.0540540541, 0.0162162162};
 
float3 Blur(float2 unormalizedUv, const float boxRadius)
{
    float3 outColor = float3(0., 0., 0.);

    // Box blur kernal
    float weights = 0.;
    for(float u = -boxRadius; u <= boxRadius; u+=1.)
    {
        for(float v = -boxRadius; v <= boxRadius; v+=1.)
        {
            weights += 1.;
            outColor += PassSrg::m_framebuffer.Sample(PassSrg::PointSampler, normalizedUV(unormalizedUv + float2(u,v))).rgb;
        }
    }

    return outColor / weights;
}

float3 VerticalGaussianBlur(float2 unormalizedUv)
{
    float3 output = float3(0., 0., 0.);

    for (int i=1; i<5; i++) {
        output +=
            PassSrg::m_framebuffer.Sample(PassSrg::PointSampler, normalizedUV(unormalizedUv + float2(0.0, offset[i]))).rgb * weight[i];
        output +=
            PassSrg::m_framebuffer.Sample(PassSrg::PointSampler, normalizedUV(unormalizedUv - float2(0.0, offset[i]))).rgb * weight[i];
    }

    return output;
}

float3 HorizontalGaussianBlur(float2 unormalizedUv)
{
    float3 output = float3(0., 0., 0.);

    for (int i=1; i<5; i++) {
        output +=
            PassSrg::m_framebuffer.Sample(PassSrg::PointSampler, normalizedUV(unormalizedUv + float2(offset[i], 0.0))).rgb * weight[i];
        output +=
            PassSrg::m_framebuffer.Sample(PassSrg::PointSampler, normalizedUV(unormalizedUv - float2(offset[i], 0.0))).rgb * weight[i];
    }

    return output;
}

PSOutput MainPS(VSOutput IN)
{
    PSOutput OUT;

    uint2 uMaskSize;
    PassSrg::m_entityMask.GetDimensions(uMaskSize.x, uMaskSize.y);

    maskSize.x = float(uMaskSize.x);
    maskSize.y = float(uMaskSize.y);

    float2 unnormalizedUV = float2(IN.m_texCoord.x * maskSize.x, IN.m_texCoord.y * maskSize.y);
 
    // Fetch the pixel color from the input texture
    float3 color = PassSrg::m_framebuffer.Sample(PassSrg::LinearSampler, IN.m_texCoord).rgb;

    // Get the mask value at this point
    float4 mask = PassSrg::m_entityMask.Sample(PassSrg::PointSampler, IN.m_texCoord);

    // 
    float3 unmasked = Blur(unnormalizedUV, 1.);
    //float3 unmasked = VerticalGaussianBlur(unnormalizedUV);
    //unmasked += HorizontalGaussianBlur(unnormalizedUV);
    //unmasked *= 0.5;
    
    float zDepth =  PassSrg::m_depth.Sample(PassSrg::PointSampler, IN.m_texCoord).r * 15.;
    //float linearDepth = 
    //    abs(((ViewSrg::GetFarZTimesNearZ()) / (ViewSrg::GetFarZMinusNearZ() * zDepth - ViewSrg::GetFarZ()))); 
//
    //unmasked = lerp(color, unmasked, clamp(linearDepth, 0., 1.));

    // Apply the visual effect to non-mask entities, leaving mask entities untouched
    OUT.m_color.rgb = lerp(unmasked.rgb, color.rgb, mask.a);
    OUT.m_color.a = 1.0;

    //OUT.m_color.rgb = float3(linearDepth, linearDepth, linearDepth);

    return OUT;
}