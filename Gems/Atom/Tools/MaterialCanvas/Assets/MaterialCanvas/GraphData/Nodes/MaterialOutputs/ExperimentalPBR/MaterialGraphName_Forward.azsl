/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <viewsrg.srgi>

#include <Atom/Features/PBR/DefaultObjectSrg.azsli>
#include <Atom/Features/Pipeline/Forward/ForwardPassOutput.azsli>
#include <Atom/Features/Pipeline/Forward/ForwardPassSrg.azsli>
#include <Atom/RPI/ShaderResourceGroups/DefaultDrawSrg.azsli>

#include <Atom/Features/PBR/AlphaUtils.azsli>
#include <Atom/Features/SrgSemantics.azsli>
#include <Atom/Features/ColorManagement/TransformColor.azsli>
#include <Atom/Features/PBR/Lighting/StandardLighting.azsli>
#include <Atom/Features/PBR/Lights/IblForward.azsli>
#include <Atom/Features/PBR/Decals.azsli>

#include <MaterialGraphName_Common.azsli>
 
CommonVSOutput MainVS(CommonVSInput IN)
{
    return Evaluate_CommonVertexData(IN);
}

ForwardPassOutput MainPS(CommonVSOutput IN)
{
    CommonPSOutput commonPSOutput = Evaluate_CommonPixelData(IN);

    // ------- Surface -------

    Surface surface;
    surface.position = IN.m_worldPosition;
    surface.normal = (float3)commonPSOutput.m_normal;
    surface.vertexNormal = (float3)commonPSOutput.m_normal;
    surface.roughnessLinear = (float)commonPSOutput.m_roughness;
    surface.CalculateRoughnessA();
    surface.SetAlbedoAndSpecularF0((float3)commonPSOutput.m_baseColor, (float)commonPSOutput.m_specularF0Factor, (float)commonPSOutput.m_metallic);
    surface.clearCoat.InitializeToZero();

    // ------- LightingData -------

    LightingData lightingData;
    lightingData.tileIterator.Init(IN.m_position, PassSrg::m_lightListRemapped, PassSrg::m_tileLightData);
    lightingData.Init(surface.position, surface.normal, surface.roughnessLinear);
    lightingData.specularResponse = FresnelSchlickWithRoughness(lightingData.NdotV, surface.specularF0, surface.roughnessLinear);
    lightingData.diffuseResponse = 1.0f - lightingData.specularResponse;
    lightingData.emissiveLighting = (float3)commonPSOutput.m_emissive;

    // ------- Lighting Calculation -------

    // Apply Decals
    ApplyDecals(lightingData.tileIterator, surface);

    // Apply Direct Lighting
    ApplyDirectLighting(surface, lightingData, IN.m_position);

    // Apply Image Based Lighting (IBL)
    ApplyIblForward(surface, lightingData);

    // Finalize Lighting
    lightingData.FinalizeLighting();

    PbrLightingOutput lightingOutput = GetPbrLightingOutput(surface, lightingData, (float)commonPSOutput.m_alpha);

    // ------- Output -------

    ForwardPassOutput OUT;
    OUT.m_diffuseColor = lightingOutput.m_diffuseColor;
    OUT.m_diffuseColor.w = -1;
    OUT.m_specularColor = lightingOutput.m_specularColor;
    OUT.m_specularF0 = lightingOutput.m_specularF0;
    OUT.m_albedo = lightingOutput.m_albedo;
    OUT.m_normal = lightingOutput.m_normal;
    return OUT;
}