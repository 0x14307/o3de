#
# Copyright (c) Contributors to the Open 3D Engine Project.
# For complete copyright and license terms please see the LICENSE at the root of this distribution.
#
# SPDX-License-Identifier: Apache-2.0 OR MIT
#
#

set(GEM_NAME AzQtComponentsForPython)

o3de_pal_dir(pal_dir ${CMAKE_CURRENT_LIST_DIR}/Platform/${PAL_PLATFORM_NAME} "${gem_restricted_path}" "${gem_path}" "${gem_parent_relative_path}")

include(${pal_dir}/PAL_${PAL_PLATFORM_NAME_LOWERCASE}.cmake)

if (PAL_TRAIT_AZQTCOMPONENTSFORPYTHON_SUPPORTED)
    # The name of the Python import module we're generating.
    set(BINDINGS_LIBRARY "azqtpyside")

    # Header file containing all the types/classes we're exposing to Python.
    set(wrapped_header ${CMAKE_CURRENT_LIST_DIR}/bindings_azqtcomponents.h)

    # Typesystem xml.
    set(typesystem_file ${CMAKE_CURRENT_LIST_DIR}/bindings_azqtcomponents.xml)

    include(${CMAKE_CURRENT_LIST_DIR}/wrapped_files.cmake)
    
    # Allow AUTOMOC/AUTOUIC on generated files.
    if(POLICY CMP0071)
      cmake_policy(SET CMP0071 NEW)
    endif()

    project(AzQtComponent_Bindings LANGUAGES CXX)
    set(CMAKE_AUTOMOC ON)
    find_package(Qt5 5.12 REQUIRED COMPONENTS Core Gui Widgets)
                 
    # The library we're creating bindings for.
    set(AZQTCOMPONENTS_LIBRARY "AzQtComponents")
    
    # Load the library/exe locations. These are platform specific.
    include(${pal_dir}/azqtcomponentsforpython_file_settings.cmake)
    
    #Define the shared library for which we will create bindings.
    set_property(TARGET ${AZQTCOMPONENTS_LIBRARY} PROPERTY PREFIX "")

    # Ensure the generated wrapper files have the correct header.
    set(LICENSE_FILE ${CMAKE_CURRENT_LIST_DIR}/license_header.txt)

    # Set up the options to pass to shiboken.
    set(shiboken_options --generator-set=shiboken --enable-parent-ctor-heuristic
        --enable-pyside-extensions --enable-return-value-heuristic --use-isnull-as-nb_nonzero
        --avoid-protected-hack --language-level=c++17 --debug-level=full
        --license-file=${LICENSE_FILE}
        -I${LY_ROOT_FOLDER}/Code/Framework/AzCore
        -I${LY_ROOT_FOLDER}/Code/Framework/AzQtComponents
        -I${LY_ROOT_FOLDER}/Code/Framework/AzCore/Platform/${PAL_PLATFORM_NAME} 
        -I${QT_MODULE_DIR}/include
        -I${QT_MODULE_DIR}/include/QtWidgets
        -I${QT_MODULE_DIR}/include/QtCore
        -I${QT_MODULE_DIR}/include/QtGui
        -T${PYSIDE2_TYPESYSTEM_PATH}
        -T${PYSIDE2_SHARE_PATH}
        --output-directory=${CMAKE_CURRENT_BINARY_DIR}
    )

    set(generated_sources_dependencies ${wrapped_header} ${typesystem_file})

    add_custom_command(
        OUTPUT ${WRAPPED_FILES}
        COMMAND ${SHIBOKEN_GENERATOR_EXE_PATH} ${shiboken_options} ${wrapped_header} ${typesystem_file}
        DEPENDS ${generated_sources_dependencies} 
        COMMENT "Running generator for ${typesystem_file}."
        VERBATIM
    )

    # Set up the project for building the code generated by shiboken.
    ly_add_target(
        NAME ${GEM_NAME}.Editor GEM_MODULE
        NAMESPACE Gem
        OUTPUT_NAME ${BINDINGS_LIBRARY}
        FILES_CMAKE
            wrapped_files.cmake
        INCLUDE_DIRECTORIES
            PRIVATE
                ${PYSIDE2_INCLUDE_DIR}
                ${PYTHON_INCLUDE_DIR}
                ${SHIBOKEN_INCLUDE_DIR}
                ${PYSIDE2_INCLUDE_DIR}/QtCore
                ${PYSIDE2_INCLUDE_DIR}/QtGui
                ${PYSIDE2_INCLUDE_DIR}/QtWidgets
        BUILD_DEPENDENCIES
            PUBLIC
                3rdParty::pyside2
                Qt5::Widgets
                Qt5::Core
                Qt5::Widgets
                Qt5::Gui
                ${AZQTCOMPONENTS_LIBRARY}
                Gem::EditorPythonBindings.Static
    )

    ly_create_alias(NAME ${MODULE_NAME}.Builders NAMESPACE Gem TARGETS ${MODULE_NAME})
    ly_create_alias(NAME ${MODULE_NAME}.Tools NAMESPACE Gem TARGETS ${MODULE_NAME})

    target_link_libraries( ${GEM_NAME}.Editor PRIVATE 
        debug ${PYSIDE2_SHARED_LIBRARIES_D}
        optimized ${PYSIDE2_SHARED_LIBRARIES}
    )

    target_link_libraries( ${GEM_NAME}.Editor PRIVATE 
        debug ${SHIBOKEN_SHARED_LIBRARIES_D}
        optimized ${SHIBOKEN_SHARED_LIBRARIES}
    )

    target_sources(${GEM_NAME}.Editor PRIVATE ${WRAPPED_FILES})

    # Building the wrapper files will not work with a unity build.
    set_target_properties(${GEM_NAME}.Editor PROPERTIES UNITY_BUILD OFF)

    # Append _d to the module name in a debug build.
    set_target_properties(${GEM_NAME}.Editor PROPERTIES DEBUG_POSTFIX "_d")

    if (PAL_PLATFORM_NAME STREQUAL "Windows")
        # Disable various warnings in shiboken generated wrapper code.
        #"conditional expression is constant"
        #"unreferenced formal parameter"
        #"declaration of 'x' hides previous local declaration."
        #"declaration of 'x' hides class member."
        target_compile_options(${GEM_NAME}.Editor PRIVATE /wd4127 /wd4100 /wd4456 /wd4458)
    endif()

    # Fix the name of the module.
    set_property(TARGET ${GEM_NAME}.Editor PROPERTY PREFIX "")
    set_property(TARGET ${GEM_NAME}.Editor PROPERTY SUFFIX ".pyd")

    set_target_properties(${GEM_NAME}.Editor PROPERTIES LINK_FLAGS "${python_additional_link_flags}")
endif()
