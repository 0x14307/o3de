/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */
 
#include <EditorModeCommon.azsli>
#include <EditorModeDepthTransition.azsli>
 
partial ShaderResourceGroup PassSrg : SRG_PerPass_WithFallback
{    
    float m_lineThickness;
    float4 m_lineColor;
}

static float2 maskSize;

float2 normalizedUV(float2 uv)
{
    return uv/maskSize;
}
 
// Entity outliner effect
float selectedEntityOutliner(float2 unormalizedUv, float lineThickness)
{
    float r = 0.;

    // Selected entity mask value
    float S = PassSrg::m_entityMask.Sample(PassSrg::PointSampler, normalizedUV(unormalizedUv)).a;
     
    // Outliner kernal
    for(float u = -lineThickness; u <= lineThickness; u+=1.)
    {
        for(float v = -lineThickness; v <= lineThickness; v+=1.)
        {
            r += PassSrg::m_entityMask.Sample(PassSrg::PointSampler, normalizedUV(unormalizedUv + float2(u,v))).r;
        }
    }
     
    // Only apply the outliner effect to fragments not part of S
    // Could just do an early exit above when S > 0.0...
    return min(1.0, (r / lineThickness) * (1.0 - S));
}

PSOutput MainPS(VSOutput IN)
{
    PSOutput OUT;

    maskSize = PassSrg::GetImageSize(PassSrg::m_entityMask);
    const float3 inColor = PassSrg::m_framebuffer.Sample(PassSrg::LinearSampler, IN.m_texCoord).rgb;
    const float mask = PassSrg::m_entityMask.Sample(PassSrg::PointSampler, IN.m_texCoord);
    float2 unnormalizedUV = float2(IN.m_texCoord.x * maskSize.x, IN.m_texCoord.y * maskSize.y);

    // Apply the depth transition to the blend amount
    const float zDepth =  PassSrg::m_depth.Sample(PassSrg::PointSampler, IN.m_texCoord).r;
    float t = PassSrg::CalculateTransitionBlendAmountFromDepth(zDepth, mask);

    // Outline effect
    //const float lineThickness = lerp(1., PassSrg::m_lineThickness, t);
    const float lineThickness = lerp(1., PassSrg::m_lineThickness, 1.0 - t);
    //const float lineThickness = PassSrg::m_lineThickness;
    const float outline = selectedEntityOutliner(unnormalizedUV, lineThickness);

    // Apply the visual effect to non-mask entities, leaving mask entities untouched
    OUT.m_color = PassSrg::CalculateFinalBlendAmountAndOutputColor(inColor, PassSrg::m_lineColor.rgb, outline);

    //OUT.m_color.rgb = float3(t, t, t);
    return OUT;
}