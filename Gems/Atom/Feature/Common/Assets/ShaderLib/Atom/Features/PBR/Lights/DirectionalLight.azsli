/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/Features/PBR/Lights/LightTypesCommon.azsli>
#include <Atom/Features/Shadow/DirectionalLightShadow.azsli>

void ApplyDirectionalLights(Surface surface, inout LightingData lightingData)
{
    DirectionalLightShadow::DebugInfo debugInfo = {0, false};

    // Shadowed check
    const uint shadowIndex = ViewSrg::m_shadowIndexDirectionalLight;
    float litRatio = 1.0f;
    float transmissionDistance = 0.0f;
    float backShadowRatio = 0.0f;

    if (o_enableShadows && shadowIndex <  SceneSrg::m_directionalLightCount)
    {
        litRatio = DirectionalLightShadow::GetVisibility(
            shadowIndex,
            lightingData.shadowCoords,
            surface.vertexNormal,
            debugInfo);
            
        if (o_transmission_mode == TransmissionMode::ThickObject)
        {
            backShadowRatio = DirectionalLightShadow::GetThickness(shadowIndex, lightingData.shadowCoords);
        } 
        else if (o_transmission_mode == TransmissionMode::ThinObject) 
        {
            // Use shrinked positions for thin object transmission to ensure they fall onto the object when querying
            // the depth from the shadow map
            transmissionDistance = DirectionalLightShadow::GetThickness(shadowIndex, lightingData.shrinkedShadowCoords);
        }
    }

    // Add the lighting contribution for each directional light
    for (int index = 0; index < SceneSrg::m_directionalLightCount; index++)
    {
        SceneSrg::DirectionalLight light = SceneSrg::m_directionalLights[index];
        float3 dirToLight = normalize(-light.m_direction);

        // Adjust the direction of the light based on its angular diameter.
        float3 reflectionDir = reflect(-lightingData.dirToCamera, surface.normal);
        float3 lightDirToReflectionDir = reflectionDir - dirToLight;
        float lightDirToReflectionDirLen = length(lightDirToReflectionDir);
        lightDirToReflectionDir = lightDirToReflectionDir / lightDirToReflectionDirLen; // normalize the length
        lightDirToReflectionDirLen = min(light.m_angularRadius, lightDirToReflectionDirLen);
        dirToLight += lightDirToReflectionDir * lightDirToReflectionDirLen;

        // [GFX TODO][ATOM-2012] care of multiple directional light
        // Currently shadow check is done only for index == shadowIndex.
        float currentLitRatio = 1.0f;
        float currentTransmissionParameter = 1.0f;
        if (o_enableShadows)
        {
            bool activeLight = index == shadowIndex;
            currentLitRatio = activeLight ? litRatio : 1.;
            if (o_transmission_mode == TransmissionMode::ThickObject)
            {
                // Back shadow ratio (add contribution only if current directional light is the active one for shadows)
                currentTransmissionParameter = activeLight ?  backShadowRatio : 0.;
            }
            else if (o_transmission_mode == TransmissionMode::ThinObject)
            {
                // Transmission distance (add contribution only if current directional light is the active one for shadows)
                currentTransmissionParameter = activeLight ? transmissionDistance : 9999.f;
            }
        }
        
        lightingData.diffuseLighting += GetDiffuseLighting(surface, lightingData, light.m_rgbIntensityLux, dirToLight) * currentLitRatio;
        lightingData.specularLighting += GetSpecularLighting(surface, lightingData, light.m_rgbIntensityLux, dirToLight) * currentLitRatio;
        lightingData.translucentBackLighting += GetBackLighting(surface, lightingData, light.m_rgbIntensityLux, dirToLight, currentTransmissionParameter);
    }
    
    // Add debug coloring for directional light shadow
    if (o_enableShadows && shadowIndex <  SceneSrg::m_directionalLightCount)
    {
        lightingData.specularLighting = DirectionalLightShadow::AddDebugColoring(
            lightingData.specularLighting,
            ViewSrg::m_shadowIndexDirectionalLight,
            debugInfo);
    }

}
