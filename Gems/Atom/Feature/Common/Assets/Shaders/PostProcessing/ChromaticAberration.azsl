/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#include <scenesrg.srgi>

ShaderResourceGroup PassSrg : SRG_PerPass
{
    Texture2D<float4> m_inputColor;
    RWTexture2D<float4> m_outputColor;

    // Must match the struct in .cpp
    struct Constants
    {
        uint2 m_outputSize; // texture size of output
        float2 m_outputCenter; // center of image in pixel coords
        float m_strength; // strength of effect (0 to 1), i.e. displacement of channels
        float m_blend; // blend factor between original and aberration
        float m_blendRemainder; // 1-m_blend
    };
    Constants m_constants;
}

[numthreads(8, 8, 1)]
void MainCS(uint3 dispatchThreadID : SV_DispatchThreadID)
{
    if (dispatchThreadID.x >= PassSrg::m_constants.m_outputSize.x || dispatchThreadID.y >= PassSrg::m_constants.m_outputSize.y)
    {
        return;
    }

    float2 disp = dispatchThreadID.xy - PassSrg::m_constants.m_outputCenter;
    float2 offset = disp * PassSrg::m_constants.m_strength;

    float go = PassSrg::m_inputColor[dispatchThreadID.xy].g * PassSrg::m_constants.m_blend;
    float bo = PassSrg::m_inputColor[dispatchThreadID.xy].b * PassSrg::m_constants.m_blend;
    float ga = PassSrg::m_inputColor[dispatchThreadID.xy - trunc(offset * 0.5)].g * PassSrg::m_constants.m_blendRemainder;
    float ba = PassSrg::m_inputColor[dispatchThreadID.xy - trunc(offset)].b * PassSrg::m_constants.m_blendRemainder;

    PassSrg::m_outputColor[dispatchThreadID.xy] = float4(PassSrg::m_inputColor[dispatchThreadID.xy].r, go + ga, bo + ba, 1.0);
}