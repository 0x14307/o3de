/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once

#include <Atom/RPI/Math.azsli>

#include <Atom/Features/SrgSemantics.azsli>

#include <Atom/Features/PostProcessing/FullscreenVertex.azsli>

#include <Atom/Features/PostProcessing/Aces.azsli>
#include <Atom/Features/PostProcessing/Shapers.azsli>

float3 convert2Dto3DLutCoords(float2 uv, float width, float height)
{
    float2 adjustedUv = float2(uv.x * width, uv.y * height);
    float3 coords = float3(adjustedUv.x%height, 0.5 + int(adjustedUv.x/height), adjustedUv.y);
    return coords/height;
}

enum class LutResolution
{
    Lut16x16x16,
    Lut32x32x32,
    Lut64x64x64
};

ShaderResourceGroup PassSrg : SRG_PerPass_WithFallback
{
    // framebuffer sampler
    Sampler PointSampler
    {
        MinFilter = Point;
        MagFilter = Point;
        MipFilter = Point;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

    Sampler LinearSampler
    {
        MinFilter = Linear;
        MagFilter = Linear;
        MipFilter = Linear;
        AddressU = Clamp;
        AddressV = Clamp;
        AddressW = Clamp;
    };

    // Identity LUTs
    Texture3D<float4> m_identityLut16x16x16;
    Texture3D<float4> m_identityLut32x32x32;
    Texture3D<float4> m_identityLut64x64x64;

    int m_lutResolution;
    int m_shaperType;
    float m_shaperBias;
    float m_shaperScale;

    float m_colorGradingExposure;
    float m_colorGradingContrast;
    float m_colorGradingHueShift;
    float m_colorGradingPreSaturation;
    float m_colorFilterIntensity;
    float m_colorFilterMultiply;
    float m_whiteBalanceKelvin;
    float m_whiteBalanceTint;
    float m_splitToneBalance;
    float m_splitToneWeight;
    float m_colorGradingPostSaturation;
    float m_smhShadowsStart;
    float m_smhShadowsEnd;
    float m_smhHighlightsStart;
    float m_smhHighlightsEnd;
    float m_smhWeight;

    float3 m_channelMixingRed;
    float3 m_channelMixingGreen;
    float3 m_channelMixingBlue;

    float4 m_colorFilterSwatch;
    float4 m_splitToneShadowsColor;
    float4 m_splitToneHighlightsColor;

    float4 m_smhShadowsColor;
    float4 m_smhMidtonesColor;
    float4 m_smhHighlightsColor;
}

#include <Atom/Features/PostProcessing/HDRColorGradingCommon.azsl>

struct PSOutput
{
    float4 m_lutOutput : SV_Target0;
};

PSOutput MainPS(VSOutput IN)
{
    ShaperType shaperType = (ShaperType)PassSrg::m_shaperType;

    PSOutput OUT;

    // baseCoords are from 0-1
    float3 baseCoords = float3(0.0, 0.0, 0.0);
    LutResolution lutRes = (LutResolution)PassSrg::m_lutResolution;
    switch(lutRes)
    {
        case LutResolution::Lut16x16x16:
        {
            baseCoords = convert2Dto3DLutCoords(IN.m_texCoord, 256, 16);
            baseCoords = PassSrg::m_identityLut16x16x16.Sample(PassSrg::PointSampler, baseCoords, 0.0).rgb;
            break;
        }
        case LutResolution::Lut32x32x32:
        {
            baseCoords = convert2Dto3DLutCoords(IN.m_texCoord, 1024, 32);
            baseCoords = PassSrg::m_identityLut32x32x32.Sample(PassSrg::PointSampler, baseCoords, 0.0).rgb;
            break;
        }
        case LutResolution::Lut64x64x64:
        {
            baseCoords = convert2Dto3DLutCoords(IN.m_texCoord, 4096, 64);
            baseCoords = PassSrg::m_identityLut64x64x64.Sample(PassSrg::PointSampler, baseCoords, 0.0).rgb;
            break;
        }
    }

    float3 linearColor = ShaperToLinear(baseCoords, shaperType, PassSrg::m_shaperBias, PassSrg::m_shaperScale);

    linearColor = TransformColor(linearColor, ColorSpaceId::LinearSRGB, ColorSpaceId::ACEScg);
    float3 gradedColor = ColorGrade(linearColor);
    gradedColor = TransformColor(gradedColor, ColorSpaceId::ACEScg, ColorSpaceId::LinearSRGB);

    // Bring back coordinates into 0-1
    float3 shapedColor = LinearToShaper(gradedColor, shaperType, PassSrg::m_shaperBias, PassSrg::m_shaperScale);
    shapedColor = saturate(shapedColor);

    OUT.m_lutOutput = float4(shapedColor, 1.0);
    return OUT;
}
