/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once


#include "MaterialFunctions/EvaluateTangentFrame.azsli"

PixelGeometryData EvaluatePixelGeometry_BasePBR(
    float3 positionWS,
    float3 normal,
    float3 tangent,
    float3 bitangent,
    float2 uv[UvSetCount],
    bool isFrontFace)
{
    PixelGeometryData geoData;

    geoData.positionWS = positionWS;
    geoData.vertexNormal = normalize(normal);

    geoData.tangents[0] = tangent;
    geoData.tangents[1] = tangent;

    geoData.bitangents[0] = bitangent;
    geoData.bitangents[1] = bitangent;

    geoData.uv = uv;
    geoData.isFrontFace = isFrontFace;

    if (o_normal_useTexture)
    {
        for (int i = 0; i != UvSetCount; ++i)
        {
            EvaluateTangentFrame(geoData.vertexNormal, positionWS, isFrontFace, uv[i], i,
                tangent, bitangent, geoData.tangents[i], geoData.bitangents[i]);
        }
    }

    return geoData;
}

PixelGeometryData EvaluatePixelGeometry_BasePBR(VSOutput IN, bool isFrontFace)
{
    return EvaluatePixelGeometry_BasePBR(
        IN.m_worldPosition,
        IN.m_normal,
        IN.m_tangent,
        IN.m_bitangent,
        IN.m_uv,
        isFrontFace);
}


#ifdef PIXEL_GEOMETRY_DATA_IS_BASE_PBR

#define     EvaluatePixelGeometry(IN, isFrontFace)                  \
            EvaluatePixelGeometry_BasePBR(IN, isFrontFace)

#endif
