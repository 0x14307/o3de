/*
 * Copyright (c) Contributors to the Open 3D Engine Project.
 * For complete copyright and license terms please see the LICENSE at the root of this distribution.
 *
 * SPDX-License-Identifier: Apache-2.0 OR MIT
 *
 */

#pragma once


#include <Atom/Features/Pipeline/Forward/ForwardPassOutput.azsli>

// --- Vertex Shader ---

VsOutput VertexShader(VsInput IN)
{
    VsOutput OUT = EvaluateVertexGeometry(IN);
    return OUT;
}


// --- Pixel Shader ---

[earlydepthstencil]
ForwardPassOutput PixelShader(VsOutput IN, bool isFrontFace : SV_IsFrontFace)
{
    // ------- Geometry -> Surface -> Lighting -------

    PixelGeometryData geoData = EvaluatePixelGeometry(IN, isFrontFace);

    Surface surface = EvaluateSurface(geoData);

    LightingData lightingData = EvaluateLighting(surface, IN.m_position);

    // ------- Output -------

    ForwardPassOutput OUT;

    OUT.m_diffuseColor.rgb = lightingData.diffuseLighting;
    OUT.m_diffuseColor.a = 1.0;

    OUT.m_specularColor.rgb = lightingData.specularLighting;
    OUT.m_specularColor.a = 1.0;

    OUT.m_specularF0.rgb = surface.specularF0;
    OUT.m_specularF0.a = surface.roughnessLinear;

    OUT.m_albedo.rgb = surface.albedo * lightingData.diffuseResponse * lightingData.diffuseAmbientOcclusion;
    OUT.m_albedo.a = lightingData.specularOcclusion;

    OUT.m_normal.rgb = EncodeNormalSignedOctahedron(surface.normal);
    OUT.m_normal.a = EncodeUnorm2BitFlags(o_enableIBL, o_specularF0_enableMultiScatterCompensation);

    DebugModifyOutput(OUT.m_diffuseColor, OUT.m_specularColor, OUT.m_albedo, OUT.m_specularF0, surface.normal,
                    geoData.tangents[MaterialSrg::m_normalMapUvIndex], geoData.bitangents[MaterialSrg::m_normalMapUvIndex],
                    surface.baseColor, surface.albedo, surface.roughnessLinear, surface.metallic);

    return OUT;
}
